{"remainingRequest":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\babel-loader\\lib\\index.js!F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\src\\components\\jeecg\\JEditableTable.vue","mtime":1574059798026},{"path":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1572241135682},{"path":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1572241093574},{"path":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1572241135682},{"path":"F:\\AAAAJeecg-boot\\jeecgbootwithonline\\ant-design-jeecg-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1574652421668}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.parse-int\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport _slicedToArray from \"F:\\\\AAAAJeecg-boot\\\\jeecgbootwithonline\\\\ant-design-jeecg-vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport _typeof from \"F:\\\\AAAAJeecg-boot\\\\jeecgbootwithonline\\\\ant-design-jeecg-vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport _defineProperty from \"F:\\\\AAAAJeecg-boot\\\\jeecgbootwithonline\\\\ant-design-jeecg-vue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport Draggable from 'vuedraggable';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil';\nimport { cloneObject, randomString } from '@/utils/util';\nimport JDate from '@/components/jeecg/JDate';\nimport { initDictOptions } from '@/components/dict/JDictSelectUtil'; // 行高，需要在实例加载完成前用到\n\nvar rowHeight = 61;\nexport default {\n  name: 'JEditableTable',\n  components: {\n    JDate: JDate,\n    Draggable: Draggable\n  },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    }\n  },\n  data: function data() {\n    return {\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: \"_jet-\".concat(randomString(6), \"-\"),\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: {\n          left: '0px'\n        },\n        // 左侧固定td的style\n        tdLeft: {\n          'min-width': '4%',\n          'max-width': '45px'\n        },\n        tdLeftDs: {\n          'min-width': '30px',\n          'max-width': '35px'\n        }\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight: rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // file 信息\n      uploadValues: {},\n      //popup信息\n      popupValues: {},\n      radioValues: {},\n      metaCheckboxValues: {},\n      multiSelectValues: {},\n      searchSelectValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: []\n    };\n  },\n  created: function created() {\n    // 当前显示的tr\n    this.visibleTrEls = [];\n    this.disabledRowIds = this.disabledRowIds || [];\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight: function getExpandHeight() {\n      return this.rows.length * this.rowHeight;\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate: function getSelectIndeterminate() {\n      return this.selectedRowIds.length > 0 && this.selectedRowIds.length < this.rows.length;\n    },\n    // 获取是否选择了全部\n    getSelectAll: function getSelectAll() {\n      return this.selectedRowIds.length === this.rows.length && this.rows.length > 0;\n    },\n    tbodyStyle: function tbodyStyle() {\n      var style = Object.assign({}, this.style.tbody); // style['max-height'] = `${this.maxHeight}px`\n\n      style['width'] = this.realTrWidth;\n      return style;\n    },\n    showClearSelectButton: function showClearSelectButton() {\n      var count = 0;\n\n      for (var key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++;\n      }\n\n      return count > 0;\n    },\n    accessToken: function accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN);\n    },\n    realTrWidth: function realTrWidth() {\n      var _this = this;\n\n      var calcWidth = 'calc(';\n      this.columns.forEach(function (column, i) {\n        var type = column.type,\n            width = column.width; // 隐藏字段不参与计算\n\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px';\n          } else if (typeof width === 'string') {\n            calcWidth += width;\n          } else {\n            calcWidth += '120px';\n          }\n\n          if (i < _this.columns.length - 1) {\n            calcWidth += ' + ';\n          }\n        }\n      });\n      calcWidth += ')'; // console.log('calcWidth: ', calcWidth)\n\n      return calcWidth;\n    }\n  },\n  // 侦听器\n  watch: {\n    rows: {\n      immediate: true,\n      handler: function handler(val, old) {// val.forEach(item => {\n        //   for (let inputValue of  this.inputValues) {\n        //     if (inputValue.id === item.id) {\n        //       item['dbFieldName'] = inputValue['dbFieldName']\n        //       break\n        //     }\n        //   }\n        // })\n        // console.log('watch.rows:', cloneObject({ val, old }))\n      }\n    },\n    dataSource: {\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this2 = this;\n\n        this.initialize();\n        var rows = [];\n        var checkboxValues = {};\n        var selectValues = {};\n        var jdateValues = {};\n        var uploadValues = {};\n        var popupValues = {};\n        var radioValues = {};\n        var multiSelectValues = {};\n        var searchSelectValues = {}; // 禁用行的id\n\n        var disabledRowIds = this.disabledRowIds || [];\n        newValue.forEach(function (data, newValueIndex) {\n          // 判断源数据是否带有id\n          if (data.id == null || data.id === '') {\n            data.id = _this2.removeCaseId(_this2.generateId() + newValueIndex);\n          }\n\n          var value = {\n            id: _this2.caseId + data.id\n          };\n          var row = {\n            id: value.id\n          };\n          var disabled = false;\n\n          _this2.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n            var sourceValue = (data[column.key] == null ? '' : data[column.key]).toString();\n\n            if (column.type === FormTypes.checkbox) {\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                var customValue = (column.customValue[0] || '').toString();\n                checkboxValues[inputId] = sourceValue === customValue;\n              } else {\n                checkboxValues[inputId] = sourceValue;\n              }\n            } else if (column.type === FormTypes.select) {\n              if (sourceValue) {\n                // 判断是否是多选\n                selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue;\n              } else {\n                selectValues[inputId] = undefined;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              jdateValues[inputId] = sourceValue;\n            } else if (column.type === FormTypes.slot) {\n              if (sourceValue !== 0 && !sourceValue) {\n                value[column.key] = column.defaultValue;\n              } else {\n                value[column.key] = sourceValue;\n              }\n            } else if (column.type === FormTypes.popup) {\n              popupValues[inputId] = sourceValue;\n            } else if (column.type === FormTypes.radio) {\n              radioValues[inputId] = sourceValue;\n            } else if (column.type === FormTypes.sel_search) {\n              searchSelectValues[inputId] = sourceValue;\n            } else if (column.type === FormTypes.list_multi) {\n              if (sourceValue.length > 0) {\n                multiSelectValues[inputId] = sourceValue.split(\",\");\n              } else {\n                multiSelectValues[inputId] = [];\n              }\n            } else if (column.type === FormTypes.file || column.type === FormTypes.image) {\n              if (sourceValue) {\n                var fileName = sourceValue.substring(sourceValue.lastIndexOf(\"/\") + 1);\n                uploadValues[inputId] = {\n                  name: fileName,\n                  status: 'done',\n                  path: sourceValue\n                };\n              }\n            } else {\n              value[column.key] = sourceValue;\n            } // 解析disabledRows\n\n\n            for (var columnKey in _this2.disabledRows) {\n              // 判断是否有该属性\n              if (_this2.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                if (disabled !== true) {\n                  var temp = _this2.disabledRows[columnKey]; // 禁用规则可以是一个数组\n\n                  if (temp instanceof Array) {\n                    disabled = temp.includes(data[columnKey]);\n                  } else {\n                    disabled = temp === data[columnKey];\n                  }\n\n                  if (disabled) {\n                    disabledRowIds.push(row.id);\n                  }\n                }\n              }\n            }\n          });\n\n          _this2.inputValues.push(value);\n\n          rows.push(row);\n        });\n        this.disabledRowIds = disabledRowIds;\n        this.checkboxValues = checkboxValues;\n        this.selectValues = selectValues;\n        this.jdateValues = jdateValues;\n        this.rows = rows;\n        this.uploadValues = uploadValues;\n        this.popupValues = popupValues;\n        this.radioValues = radioValues;\n        this.multiSelectValues = multiSelectValues;\n        this.searchSelectValues = searchSelectValues; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this2.updateFormValues();\n        });\n      }\n    },\n    columns: {\n      immediate: true,\n      handler: function handler(columns) {\n        var _this3 = this;\n\n        columns.forEach(function (column) {\n          if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n            // 兼容 旧版本 options\n            if (column.options instanceof Array) {\n              column.options = column.options.map(function (item) {\n                if (item) {\n                  return _objectSpread({}, item, {\n                    text: item.text || item.title,\n                    title: item.text || item.title\n                  });\n                }\n\n                return {};\n              });\n            }\n\n            if (column.dictCode) {\n              _this3._loadDictConcatToOptions(column);\n            }\n          }\n        });\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds: function selectedRowIds(newValue) {\n      var _this4 = this;\n\n      this.$emit('selectRowChange', cloneObject(newValue).map(function (i) {\n        return _this4.removeCaseId(i);\n      }));\n    }\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    // 获取document element对象\n    var elements = {};\n    ['inputTable', 'tbody'].forEach(function (id) {\n      elements[id] = document.getElementById(_this5.caseId + id);\n    });\n    this.el = elements;\n    var vm = this;\n    /** 监听滚动条事件 */\n\n    this.el.inputTable.onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft);\n    };\n\n    this.el.tbody.onscroll = function (event) {// vm.recalcTrHiddenItem(event.target.scrollTop)\n    };\n\n    var _this$$refs = this.$refs,\n        thead = _this$$refs.thead,\n        scrollView = _this$$refs.scrollView;\n\n    scrollView.onscroll = function (event) {\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n      thead.scrollLeft = event.target.scrollLeft; // vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      vm.recalcTrHiddenItem(event.target.scrollTop);\n    };\n  },\n  methods: {\n    /** 初始化列表 */\n    initialize: function initialize() {\n      var _this6 = this;\n\n      // inputValues：用来存储input表单的值\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n      // 示例：\n      // [{\n      //    id: \"_jet-4sp0iu-15541771111770\"\n      //    dbDefaultVal: \"aaa\",\n      //    dbFieldName: \"bbb\",\n      //    dbFieldTxt: \"ccc\",\n      //    dbLength: 32\n      // }]\n      this.inputValues = [];\n      this.visibleTrEls = [];\n      this.rows = [];\n      this.deleteIds = [];\n      this.selectValues = {};\n      this.checkboxValues = {};\n      this.jdateValues = {};\n      this.selectedRowIds = [];\n      this.tooltips = {};\n      this.notPassedIds = [];\n      this.uploadValues = [];\n      this.popupValues = [];\n      this.radioValues = [];\n      this.multiSelectValues = [];\n      this.searchSelectValues = [];\n      this.scrollTop = 0;\n      this.$nextTick(function () {\n        _this6.el.tbody.scrollTop = 0;\n      });\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar: function syncScrollBar(scrollLeft) {// this.style.tbody.left = `${scrollLeft}px`\n      // this.el.tbody.scrollLeft = scrollLeft\n    },\n\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop: function resetScrollTop(top) {\n      var scrollView = this.$refs.scrollView;\n\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top;\n      } else {\n        scrollView.scrollTop = this.scrollTop;\n      }\n    },\n\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem: function recalcTrHiddenItem(top) {\n      var _this7 = this;\n\n      var diff = top - this.scrollTop;\n\n      if (diff < 0) {\n        diff = this.scrollTop - top;\n      } // 只有在滚动了百分之三十的行高的距离时才进行更新\n\n\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this7.updateFormValues();\n        });\n      }\n    },\n\n    /** 生成id */\n    generateId: function generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || [];\n      }\n\n      var timestamp = new Date().getTime();\n      return \"\".concat(this.caseId).concat(timestamp).concat(rows.length);\n    },\n\n    /** push 一条数据 */\n    push: function push(record) {\n      var _this8 = this;\n\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rows = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!(rows instanceof Array)) {\n        rows = cloneObject(this.rows) || [];\n      }\n\n      if (record.id == null) {\n        record.id = this.generateId(rows); // let timestamp = new Date().getTime()\n        // record.id = `${this.caseId}${timestamp}${rows.length}`\n      }\n\n      if (record.id.indexOf(this.caseId) === -1) {\n        record.id = this.caseId + record.id;\n      }\n\n      var row = {\n        id: record.id\n      };\n      var value = {\n        id: row.id\n      };\n      var checkboxValues = Object.assign({}, this.checkboxValues);\n      var selectValues = Object.assign({}, this.selectValues);\n      var jdateValues = Object.assign({}, this.jdateValues);\n      this.columns.forEach(function (column) {\n        var key = column.key;\n        var inputId = key + row.id; // record中是否有该列的值\n\n        var recordHasValue = record[key] != null;\n\n        if (column.type === FormTypes.input) {\n          value[key] = recordHasValue ? record[key] : column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n        } else if (column.type === FormTypes.inputNumber) {\n          // 判断是否是排序字段，如果是就赋最大值\n          if (column.isOrder === true) {\n            value[key] = _this8.getInputNumberMaxValue(column) + 1;\n          } else {\n            value[key] = recordHasValue ? record[key] : column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n          }\n        } else if (column.type === FormTypes.checkbox) {\n          checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked;\n        } else if (column.type === FormTypes.select) {\n          var selected = column.defaultValue;\n\n          if (selected !== 0 && !selected) {\n            selected = undefined;\n          } // 判断多选\n\n\n          if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\n            selected = selected.split(',');\n          }\n\n          selectValues[inputId] = recordHasValue ? record[key] : selected;\n        } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue;\n        } else if (column.type === FormTypes.slot) {\n          value[key] = recordHasValue ? record[key] : column.defaultValue || '';\n        } else {\n          value[key] = recordHasValue ? record[key] : '';\n        }\n      });\n      rows.push(row);\n      this.inputValues.push(value);\n      this.checkboxValues = checkboxValues;\n      this.selectValues = selectValues;\n      this.jdateValues = jdateValues;\n\n      if (this.dragSort) {\n        this.inputValues.forEach(function (item, index) {\n          item[_this8.dragSortKey] = index + 1;\n        });\n      }\n\n      if (update) {\n        this.rows = rows;\n        this.$nextTick(function () {\n          _this8.updateFormValues();\n        });\n      }\n\n      return rows;\n    },\n\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue: function getInputNumberMaxValue(column) {\n      var maxNum = 0;\n      this.inputValues.forEach(function (item, index) {\n        var val = item[column.key],\n            num;\n\n        try {\n          num = parseInt(val);\n        } catch (_unused) {\n          num = 0;\n        } // 把首次循环的结果当成最大值\n\n\n        if (index === 0) {\n          maxNum = num;\n        } else {\n          maxNum = num > maxNum ? num : maxNum;\n        }\n      });\n      return maxNum;\n    },\n\n    /** 添加一行 */\n    add: function add() {\n      var _this9 = this;\n\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var forceScrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (num < 1) return; // let timestamp = new Date().getTime()\n\n      var rows = this.rows;\n      var row;\n\n      for (var i = 0; i < num; i++) {\n        // row = { id: `${this.caseId}${timestamp}${rows.length}` }\n        row = {\n          id: this.generateId(rows)\n        };\n        rows = this.push(row, false, rows);\n      }\n\n      this.rows = rows;\n      var rowValue = this.getValuesSync({\n        validate: false,\n        rowIds: [this.removeCaseId(row.id)]\n      }).values[0];\n      this.$nextTick(function () {\n        _this9.updateFormValues();\n      }); // 触发add事件\n\n      this.$emit('added', {\n        row: rowValue,\n        target: this\n      }); // 设置滚动条位置\n\n      var tbody = this.el.tbody;\n      var offsetHeight = tbody.offsetHeight;\n      var realScrollTop = tbody.scrollTop + offsetHeight;\n\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!(tbody.scrollHeight - realScrollTop <= 10)) {\n          return;\n        }\n      }\n\n      this.$nextTick(function () {\n        tbody.scrollTop = tbody.scrollHeight;\n      });\n    },\n\n    /** 删除被选中的行 */\n    removeSelectedRows: function removeSelectedRows() {\n      this.removeRows(this.selectedRowIds);\n      this.selectedRowIds = [];\n    },\n\n    /** 删除一行或多行 */\n    removeRows: function removeRows(id) {\n      var _this10 = this;\n\n      var ids = id;\n\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id];\n        } else {\n          throw \"JEditableTable.removeRows() \\u51FD\\u6570\\u9700\\u8981\\u7684\\u53C2\\u6570\\u53EF\\u4EE5\\u662Fstring\\u6216Array\\u7C7B\\u578B\\uFF0C\\u4F46\\u63D0\\u4F9B\\u7684\\u5374\\u662F\".concat(_typeof(id));\n        }\n      }\n\n      var rows = cloneObject(this.rows);\n      ids.forEach(function (removeId) {\n        // 找到每个id对应的真实index并删除\n        var findAndDelete = function findAndDelete(arr) {\n          for (var i = 0; i < arr.length; i++) {\n            if (arr[i].id === removeId || arr[i].id === _this10.caseId + removeId) {\n              arr.splice(i, 1);\n              return true;\n            }\n          }\n        }; // 找到rows对应的index，并删除\n\n\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(_this10.inputValues); // 将caseId去除\n\n          var _id = _this10.removeCaseId(removeId);\n\n          _this10.deleteIds.push(_id);\n        }\n      });\n      this.rows = rows;\n      this.$emit('deleted', this.getDeleteIds());\n      this.$nextTick(function () {\n        // 更新formValues\n        _this10.updateFormValues();\n      });\n      return true;\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync: function getValuesSync() {\n      var _this11 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var validate = options.validate,\n          rowIds = options.rowIds;\n      if (typeof validate !== 'boolean') validate = true;\n      if (!(rowIds instanceof Array)) rowIds = null; // console.log('options:', { validate, rowIds })\n\n      var error = 0;\n      var inputValues = cloneObject(this.inputValues);\n      var tooltips = Object.assign({}, this.tooltips);\n      var notPassedIds = cloneObject(this.notPassedIds); // 用于存储合并后的值\n\n      var values = []; // 遍历inputValues来获取每行的值\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var value = _step.value;\n          var rowIdsFlag = false; // 如果带有rowIds，那么就只存这几行的数据\n\n          if (rowIds == null) {\n            rowIdsFlag = true;\n          } else {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = rowIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var rowId = _step2.value;\n\n                if (rowId === value.id || \"\".concat(_this11.caseId).concat(rowId) === value.id) {\n                  rowIdsFlag = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          if (!rowIdsFlag) return \"continue\";\n\n          _this11.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n\n            if (column.type === FormTypes.checkbox) {\n              var checked = _this11.checkboxValues[inputId];\n\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1];\n              } else {\n                value[column.key] = checked;\n              }\n            } else if (column.type === FormTypes.select) {\n              var selected = _this11.selectValues[inputId];\n\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected);\n              } else {\n                value[column.key] = selected;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = _this11.jdateValues[inputId];\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(_this11.uploadValues[inputId] || null);\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              var currUploadObj = cloneObject(_this11.uploadValues[inputId] || null);\n\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null;\n              }\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = _this11.popupValues[inputId] || null;\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = _this11.radioValues[inputId];\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = _this11.searchSelectValues[inputId];\n            } else if (column.type === FormTypes.list_multi) {\n              if (!_this11.multiSelectValues[inputId] || _this11.multiSelectValues[inputId].length == 0) {\n                value[column.key] = '';\n              } else {\n                value[column.key] = _this11.multiSelectValues[inputId].join(\",\");\n              }\n            } // 检查表单验证\n\n\n            if (validate === true) {\n              var results = _this11.validateOneInput(value[column.key], value, column, notPassedIds, false, 'getValues');\n\n              tooltips[inputId] = results[0];\n\n              if (tooltips[inputId].passed === false) {\n                error++; // if (error++ === 0) {\n                // let element = document.getElementById(inputId)\n                // while (element.className !== 'tr') {\n                //   element = element.parentElement\n                // }\n                // this.jumpToId(inputId, element)\n                // }\n              }\n\n              tooltips[inputId].visible = false;\n              notPassedIds = results[1];\n            }\n          }); // 将caseId去除\n\n\n          value.id = _this11.removeCaseId(value.id);\n          values.push(value);\n        };\n\n        for (var _iterator = inputValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (validate === true) {\n        this.tooltips = tooltips;\n        this.notPassedIds = notPassedIds;\n      }\n\n      return {\n        error: error,\n        values: values\n      };\n    },\n\n    /** 获取表格表单里的值 */\n    getValues: function getValues(callback) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rowIds = arguments.length > 2 ? arguments[2] : undefined;\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds\n      });\n\n      if (typeof callback === 'function') {\n        callback(result.error, result.values);\n      }\n    },\n\n    /** getValues的Promise版 */\n    getValuesPromise: function getValuesPromise() {\n      var _this12 = this;\n\n      var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rowIds = arguments.length > 1 ? arguments[1] : undefined;\n      return new Promise(function (resolve, reject) {\n        var _this12$getValuesSync = _this12.getValuesSync({\n          validate: validate,\n          rowIds: rowIds\n        }),\n            error = _this12$getValuesSync.error,\n            values = _this12$getValuesSync.values;\n\n        if (error === 0) {\n          resolve(values);\n        } else {\n          reject(VALIDATE_NO_PASSED);\n        }\n      });\n    },\n\n    /** 获取被删除项的id */\n    getDeleteIds: function getDeleteIds() {\n      return cloneObject(this.deleteIds);\n    },\n\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll: function getAll(validate) {\n      var _this13 = this;\n\n      return new Promise(function (resolve, reject) {\n        var deleteIds = _this13.getDeleteIds();\n\n        _this13.getValuesPromise(validate).then(function (values) {\n          resolve({\n            values: values,\n            deleteIds: deleteIds\n          });\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync: function getAllSync(validate, rowIds) {\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds\n      });\n      result.deleteIds = this.getDeleteIds();\n      return result;\n    },\n    // slot 获取值\n    _getValueForSlot: function _getValueForSlot(rowId) {\n      return this.getValuesSync({\n        rowIds: [rowId]\n      }).values[0];\n    },\n    _getAllValuesForSlot: function _getAllValuesForSlot() {\n      return cloneObject({\n        inputValues: this.inputValues,\n        selectValues: this.selectValues,\n        checkboxValues: this.checkboxValues,\n        jdateValues: this.jdateValues,\n        uploadValues: this.uploadValues,\n        popupValues: this.popupValues,\n        radioValues: this.radioValues,\n        multiSelectValues: this.multiSelectValues,\n        searchSelectValues: this.searchSelectValues\n      });\n    },\n\n    /** 设置某行某列的值 */\n    setValues: function setValues(values) {\n      var _this14 = this;\n\n      values.forEach(function (item) {\n        var rowKey = item.rowKey,\n            newValues = item.values;\n\n        var _loop2 = function _loop2(newValueKey) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            var newValue = newValues[newValueKey];\n            var edited = false; // 已被修改\n\n            _this14.inputValues.forEach(function (value) {\n              // 在inputValues中找到了该字段\n              if (\"\".concat(_this14.caseId).concat(rowKey) === value.id) {\n                if (value.hasOwnProperty(newValueKey)) {\n                  edited = true;\n                  value[newValueKey] = newValue;\n                }\n              }\n            });\n\n            var modelKey = \"\".concat(newValueKey).concat(_this14.caseId).concat(rowKey); // 在 selectValues 中寻找值\n\n            if (!edited && _this14.selectValues.hasOwnProperty(modelKey)) {\n              if (newValue !== 0 && !newValue) {\n                _this14.selectValues[modelKey] = undefined;\n              } else {\n                _this14.selectValues[modelKey] = newValue;\n              }\n\n              edited = true;\n            } // 在 checkboxValues 中寻找值\n\n\n            if (!edited && _this14.checkboxValues.hasOwnProperty(modelKey)) {\n              _this14.checkboxValues[modelKey] = newValue;\n              edited = true;\n            } // 在 jdateValues 中寻找值\n\n\n            if (!edited && _this14.jdateValues.hasOwnProperty(modelKey)) {\n              _this14.jdateValues[modelKey] = newValue;\n              edited = true;\n            }\n          }\n        };\n\n        for (var newValueKey in newValues) {\n          _loop2(newValueKey);\n        }\n      }); // 强制更新formValues\n\n      this.forceUpdateFormValues();\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //     this.el.tbody.scrollTop = element.offsetTop\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /** 验证单个表单 */\n    validateOneInput: function validateOneInput(value, row, column, notPassedIds) {\n      var _this15 = this;\n\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      var tooltips = Object.assign({}, this.tooltips); // let notPassedIds = cloneObject(this.notPassedIds)\n\n      var inputId = column.key + row.id;\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n\n      var _this$validateValue = this.validateValue(column.validateRules, value),\n          _this$validateValue2 = _slicedToArray(_this$validateValue, 2),\n          passed = _this$validateValue2[0],\n          message = _this$validateValue2[1];\n\n      var nextThen = function nextThen(res) {\n        var _res = _slicedToArray(res, 2),\n            passed = _res[0],\n            message = _res[1];\n\n        if (passed == null) {// debugger\n        }\n\n        if (passed == null && tooltips[inputId].visible != null) {\n          return;\n        }\n\n        passed = passed == null ? true : passed;\n        tooltips[inputId].visible = !passed;\n        tooltips[inputId].passed = passed;\n        var index = notPassedIds.indexOf(inputId);\n        var borderColor = null,\n            boxShadow = null;\n\n        if (!passed) {\n          tooltips[inputId].title = _this15.replaceProps(column, message);\n          borderColor = 'red';\n          boxShadow = \"0 0 0 2px rgba(255, 0, 0, 0.2)\";\n          if (index === -1) notPassedIds.push(inputId);\n        } else {\n          if (index !== -1) notPassedIds.splice(index, 1);\n        }\n\n        var element = document.getElementById(inputId);\n\n        if (element != null) {\n          // select 在 .ant-select-selection 上设置 border-color\n          if (column.type === FormTypes.select) {\n            element = element.getElementsByClassName('ant-select-selection')[0];\n          } // jdate 在 input 上设置 border-color\n\n\n          if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            element = element.getElementsByTagName('input')[0];\n          }\n\n          element.style.borderColor = borderColor;\n          element.style.boxShadow = boxShadow;\n        } // 是否更新到data\n\n\n        if (update) {\n          _this15.tooltips = tooltips;\n          _this15.notPassedIds = notPassedIds;\n        }\n      };\n\n      if (typeof passed === 'function') {\n        var executed = false;\n        passed(validType, value, row, column, function (flag, msg) {\n          if (executed) return;\n          executed = true;\n\n          if (typeof msg === 'string') {\n            message = msg;\n          }\n\n          if (flag == null) {\n            nextThen([null, message]);\n          } else if (typeof flag === 'boolean' && flag) {\n            nextThen([true, message]);\n          } else {\n            nextThen([false, message]);\n          }\n        }, this);\n      } else {\n        nextThen([passed, message]);\n      }\n\n      return [tooltips[inputId], notPassedIds];\n    },\n\n    /** 通过规则验证值是否正确 */\n    validateValue: function validateValue(rules, value) {\n      var passed = true,\n          message = ''; // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n\n      if (rules instanceof Array) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var rule = _step3.value;\n            // 当前值是否为空\n            var isNull = value == null || value === ''; // 验证规则：非空\n\n            if (rule.required === true && isNull) {\n              passed = false;\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n              // 验证规则：正则表达式\n              if (!!rule.pattern && !isNull) {\n                // 兼容 online 的规则\n                var foo = [{\n                  title: '唯一校验',\n                  value: 'only',\n                  pattern: null\n                }, {\n                  title: '6到16位数字',\n                  value: 'n6-16',\n                  pattern: /\\d{6,18}/\n                }, {\n                  title: '6到16位任意字符',\n                  value: '*6-16',\n                  pattern: /^.{6,16}$/\n                }, {\n                  title: '网址',\n                  value: 'url',\n                  pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/\n                }, {\n                  title: '电子邮件',\n                  value: 'e',\n                  pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/\n                }, {\n                  title: '手机号码',\n                  value: 'm',\n                  pattern: /^1[3456789]\\d{9}$/\n                }, {\n                  title: '邮政编码',\n                  value: 'p',\n                  pattern: /^[1-9]\\d{5}$/\n                }, {\n                  title: '字母',\n                  value: 's',\n                  pattern: /^[A-Z|a-z]+$/\n                }, {\n                  title: '数字',\n                  value: 'n',\n                  pattern: /^-?\\d+\\.?\\d*$/\n                }, {\n                  title: '整数',\n                  value: 'z',\n                  pattern: /^[1-9]\\d*$/\n                }, {\n                  title: '非空',\n                  value: '*',\n                  pattern: /^.+$/\n                }, {\n                  title: '6到18位字符串',\n                  value: 's6-18',\n                  pattern: /^.{6,18}$/\n                }, {\n                  title: '金额',\n                  value: 'money',\n                  pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/\n                }];\n                var flag = false;\n\n                for (var _i = 0, _foo = foo; _i < _foo.length; _i++) {\n                  var item = _foo[_i];\n\n                  if (rule.pattern === item.value && item.pattern) {\n                    passed = new RegExp(item.pattern).test(value);\n                    flag = true;\n                    break;\n                  }\n                }\n\n                if (!flag) passed = new RegExp(rule.pattern).test(value);\n              } else if (typeof rule.handler === 'function') {\n                return [rule.handler, rule.message];\n              } // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n\n\n            if (!passed) {\n              message = rule.message;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      return [passed, message];\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues: function updateFormValues() {\n      var _this16 = this;\n\n      var trs = this.el.tbody.getElementsByClassName('tr');\n      var trEls = [];\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = trs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _tr = _step4.value;\n          trEls.push(_tr);\n        } // 获取新增的 tr\n\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var newTrEls = trEls;\n\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = [];\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = trEls[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var tr = _step5.value;\n            var isNewest = true;\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = this.visibleTrEls[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var vtr = _step6.value;\n\n                if (vtr.id === tr.id) {\n                  isNewest = false;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n\n            if (isNewest) {\n              newTrEls.push(tr);\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      }\n\n      this.visibleTrEls = trEls; // 向新增的tr中赋值\n\n      newTrEls.forEach(function (tr) {\n        var idx = tr.dataset.idx;\n        var value = _this16.inputValues[idx];\n\n        for (var key in value) {\n          if (value.hasOwnProperty(key)) {\n            var elid = \"\".concat(key).concat(value.id);\n            var el = document.getElementById(elid);\n\n            if (el) {\n              el.value = value[key];\n            }\n          }\n        }\n      });\n    },\n\n    /** 强制更新FormValues */\n    forceUpdateFormValues: function forceUpdateFormValues() {\n      this.visibleTrEls = [];\n      this.updateFormValues();\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll: function handleChangeCheckedAll() {\n      var _this17 = this;\n\n      var selectedRowIds = [];\n\n      if (!this.getSelectAll) {\n        this.rows.forEach(function (row) {\n          if ((_this17.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id);\n          }\n        });\n      }\n\n      this.selectedRowIds = selectedRowIds;\n    },\n\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox: function handleChangeLeftCheckbox(event) {\n      var id = event.target.id;\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return;\n      }\n\n      var index = this.selectedRowIds.indexOf(id);\n\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1);\n      } else {\n        this.selectedRowIds.push(id);\n      }\n    },\n    handleClickAdd: function handleClickAdd() {\n      this.add();\n    },\n    handleConfirmDelete: function handleConfirmDelete() {\n      this.removeSelectedRows();\n    },\n    handleClickClearSelection: function handleClickClearSelection() {\n      this.clearSelection();\n    },\n    clearSelection: function clearSelection() {\n      this.selectedRowIds = [];\n    },\n\n    /** 用于搜索下拉框中的内容 */\n    handleSelectFilterOption: function handleSelectFilterOption(input, option, column) {\n      if (column.allowSearch === true) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      }\n\n      return true;\n    },\n\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect: function handleSearchSelect(value, id, row, col) {\n      if (col.allowSearch !== true && col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        var flag = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = col.options[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var option = _step7.value;\n\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true;\n              break;\n            }\n          } // !!value ：不添加空值\n\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({\n            title: value,\n            value: value,\n            searchAdd: true\n          });\n        }\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch: function handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          var indexs = [];\n          col.options.forEach(function (option, index) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd;\n            } else if (option.searchAdd === true) {\n              indexs.push(index);\n            }\n          }); // 翻转删除数组中的项\n\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = indexs.reverse()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var index = _step8.value;\n              col.options.splice(index, 1);\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd: function handleDragMoveEnd(event) {\n      var oldIndex = event.oldIndex,\n          newIndex = event.newIndex,\n          dataIdx = event.item.dataset.idx; // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n\n      var diff = Number.parseInt(dataIdx) - oldIndex;\n      oldIndex += diff;\n      newIndex += diff;\n      this.rowResort(oldIndex, newIndex); // 触发已拖动事件\n\n      this.$emit('dragged', {\n        oldIndex: oldIndex,\n        newIndex: newIndex,\n        target: this\n      });\n    },\n\n    /** 行重新排序 */\n    rowResort: function rowResort(oldIndex, newIndex) {\n      var _this18 = this;\n\n      var sort = function sort(array) {\n        // 存储旧数据，并删除旧项目\n        var temp = array[oldIndex];\n        array.splice(oldIndex, 1); // 向新项目里添加旧数据\n\n        array.splice(newIndex, 0, temp);\n      };\n\n      sort(this.rows);\n      sort(this.inputValues); // 重置排序字段\n\n      this.inputValues.forEach(function (val, idx) {\n        return val[_this18.dragSortKey] = idx + 1;\n      });\n      this.forceUpdateFormValues();\n    },\n\n    /* --- common function begin --- */\n\n    /** 鼠标移入 */\n    handleMouseoverCommono: function handleMouseoverCommono(row, column) {\n      var inputId = column.key + row.id;\n\n      if (this.notPassedIds.indexOf(inputId) !== -1) {\n        this.showOrHideTooltip(inputId, true, true);\n      }\n    },\n\n    /** 鼠标移出 */\n    handleMouseoutCommono: function handleMouseoutCommono(row, column) {\n      var inputId = column.key + row.id;\n      this.showOrHideTooltip(inputId, false);\n    },\n\n    /** input事件 */\n    handleInputCommono: function handleInputCommono(target, index, row, column) {\n      var value = target.value,\n          dataset = target.dataset,\n          selectionStart = target.selectionStart;\n      var type = FormTypes.input;\n      var change = true;\n\n      if (\"\".concat(dataset.inputNumber) === 'true') {\n        type = FormTypes.inputNumber;\n        var replace = value.replace(/[^0-9]/g, '');\n\n        if (value !== replace) {\n          change = false;\n          value = replace;\n          target.value = replace;\n\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1;\n            target.selectionEnd = selectionStart - 1;\n          }\n        }\n      } // 存储输入的值\n\n\n      this.inputValues[index][column.key] = value; // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'input'); // 触发valueChange 事件\n\n      if (change) {\n        this.elemValueChange(type, row, column, value);\n      }\n    },\n    handleBlurCommono: function handleBlurCommono(target, index, row, column) {\n      var value = target.value; // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur');\n    },\n    handleChangeCheckboxCommon: function handleChangeCheckboxCommon(event, row, column) {\n      var _event$target = event.target,\n          id = _event$target.id,\n          checked = _event$target.checked;\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.checkbox, row, column, checked);\n    },\n    handleChangeSelectCommon: function handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.select, row, column, value);\n    },\n    handleChangeJDateCommon: function handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value);\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value);\n      }\n    },\n    handleChangeUpload: function handleChangeUpload(info, id, row, column) {\n      var file = info.file;\n      var value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      };\n\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName];\n      }\n\n      if (file.status == 'done') {\n        value['path'] = file.response[column.responseName];\n      }\n\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues');\n    },\n\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange: function bindValuesChange(value, id, key) {\n      var values = Object.assign({}, this[key]);\n      values[id] = value;\n      return values;\n    },\n\n    /** 显示或隐藏tooltip */\n    showOrHideTooltip: function showOrHideTooltip(inputId, show) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!this.tooltips[inputId] && !force) {\n        return;\n      }\n\n      var tooltip = this.tooltips[inputId] || {};\n\n      if (tooltip.visible !== show) {\n        tooltip.visible = show;\n        this.$set(this.tooltips, inputId, tooltip);\n      }\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange: function elemValueChange(type, rowSource, columnSource, value) {\n      var column = Object.assign({}, columnSource); // 将caseId去除\n\n      var row = Object.assign({}, rowSource);\n      row.id = this.removeCaseId(row.id); // 获取整行的数据\n\n      var _this$getValuesSync = this.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _this$getValuesSync.values;\n\n      if (values.length > 0) {\n        Object.assign(row, values[0]);\n      }\n\n      this.$emit('valueChange', {\n        type: type,\n        row: row,\n        column: column,\n        value: value,\n        target: this\n      });\n    },\n\n    /** 将caseId去除 */\n    removeCaseId: function removeCaseId(id) {\n      var remove = id.split(this.caseId)[1];\n      return remove ? remove : id;\n    },\n    handleClickDelFile: function handleClickDelFile(id) {\n      this.uploadValues[id] = null;\n    },\n\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions: function _loadDictConcatToOptions(column) {\n      initDictOptions(column.dictCode).then(function (res) {\n        if (res.success) {\n          var newOptions = column.options || []; // .concat(res.result)\n\n          res.result.forEach(function (item) {\n            var _iteratorNormalCompletion9 = true;\n            var _didIteratorError9 = false;\n            var _iteratorError9 = undefined;\n\n            try {\n              for (var _iterator9 = newOptions[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                var option = _step9.value;\n                if (option.value === item.value) return;\n              }\n            } catch (err) {\n              _didIteratorError9 = true;\n              _iteratorError9 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                  _iterator9.return();\n                }\n              } finally {\n                if (_didIteratorError9) {\n                  throw _iteratorError9;\n                }\n              }\n            }\n\n            newOptions.push(item);\n          });\n          column.options = newOptions;\n        } else {\n          console.group(\"JEditableTable \\u67E5\\u8BE2\\u5B57\\u5178(\".concat(column.dictCode, \")\\u53D1\\u751F\\u5F02\\u5E38\"));\n          console.log(res.message);\n          console.groupEnd();\n        }\n      });\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: console.log,\n    getVM: function getVM() {\n      return this;\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer: function getParentContainer(node) {\n      var _this19 = this;\n\n      var element = function () {\n        // nodeType 8\t: Comment\t: 注释\n        if (_this19.$el && _this19.$el.nodeType !== 8) {\n          return _this19.$el;\n        }\n\n        var doc = document.getElementById(_this19.caseId + 'inputTable');\n\n        if (doc != null) {\n          return doc;\n        }\n\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;\n      }(); // 递归判断是否带有 overflow: hidden；的父元素\n\n\n      var ifParent = function ifParent(child) {\n        var currentOverflow = null;\n\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow'];\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow'];\n        }\n\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            var _temp = ifParent(child.parentNode);\n\n            return _temp != null ? _temp : child.parentNode;\n          } else // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode);\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null;\n            }\n        } else {\n          return child;\n        }\n      };\n\n      var temp = ifParent(element);\n      return temp != null ? temp : element;\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps: function replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title);\n        value = value.replace(/\\${key}/g, col.key);\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue);\n      }\n\n      return value;\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle: function buildTrStyle(index) {\n      return {\n        'top': \"\".concat(rowHeight * index, \"px\")\n      };\n    },\n\n    /** view辅助方法：构建 td style */\n    buildTdStyle: function buildTdStyle(col) {\n      var isEmptyWidth = function isEmptyWidth(column) {\n        return column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0;\n      };\n\n      var style = {}; // 计算宽度\n\n      if (col.width) {\n        style['width'] = col.width;\n      } else if (this.columns) {\n        style['width'] = \"\".concat((100 - 4 * 2) / this.columns.filter(function (column) {\n          return !isEmptyWidth(column);\n        }).length, \"%\");\n      } else {\n        style['width'] = '120px';\n      } // checkbox 居中显示\n\n\n      var isCheckbox = col.type === FormTypes.checkbox;\n\n      if (isCheckbox) {\n        style['align-items'] = 'center';\n        style['text-align'] = 'center';\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      if (isEmptyWidth(col)) {\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      return style;\n    },\n\n    /** view辅助方法：构造props */\n    buildProps: function buildProps(row, col) {\n      var props = {}; // 解析props\n\n      if (_typeof(col.props) === 'object') {\n        for (var prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop]);\n          }\n        }\n      } // 判断select是否允许输入\n\n\n      if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n        props['showSearch'] = true;\n      } // 判断是否是禁用的列\n\n\n      props['disabled'] = typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled']; // 判断是否为禁用的行\n\n      if (props['disabled'] !== true) {\n        props['disabled'] = (this.disabledRowIds || []).indexOf(row.id) !== -1;\n      } // 判断是否禁用全部组件\n\n\n      if (this.disabled === true) {\n        props['disabled'] = true;\n      }\n\n      return props;\n    },\n\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders: function uploadGetHeaders(row, column) {\n      var headers = {};\n\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken;\n      }\n\n      return headers;\n    },\n\n    /** 上传请求地址 */\n    getUploadAction: function getUploadAction(value) {\n      if (!value) {\n        return window._CONFIG['domianURL'] + \"/sys/common/upload\";\n      } else {\n        return value;\n      }\n    },\n\n    /** 预览图片地址 */\n    getCellImageView: function getCellImageView(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n\n      if (currUploadObj && currUploadObj['path']) {\n        return window._CONFIG['domianURL'] + \"/sys/common/view/\" + currUploadObj['path'];\n      } else {\n        return '';\n      }\n    },\n\n    /** popup回调 */\n    popupCallback: function popupCallback(value, others, id, row, column, index) {\n      var _this20 = this;\n\n      // 存储输入的值\n      this.popupValues[id] = value;\n\n      if (others) {\n        Object.keys(others).map(function (key) {\n          _this20.inputValues[index][key] = others[key];\n        });\n      } // 做单个表单验证\n\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(\"input\", row, column, value); // 更新form表单的值\n\n      this.$nextTick(function () {\n        _this20.forceUpdateFormValues();\n      });\n    },\n\n    /** popup输入框回显 */\n    getPopupValue: function getPopupValue(id) {\n      return this.popupValues[id];\n    },\n    handleRadioChange: function handleRadioChange(value, id, row, column) {\n      this.radioValues = this.bindValuesChange(value, id, 'radioValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.radio, row, column, value);\n    },\n    handleMultiSelectChange: function handleMultiSelectChange(value, id, row, column) {\n      this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.list_multi, row, column, value);\n    },\n    handleSearchSelectChange: function handleSearchSelectChange(value, id, row, column) {\n      this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search, row, column, value);\n    },\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n  }\n};",{"version":3,"sources":["JEditableTable.vue"],"names":[],"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","sourcesContent":["<!-- JEditableTable -->\r\n<!-- @version 1.5.0 -->\r\n<!-- @author sjlei -->\r\n<template>\r\n  <a-spin :spinning=\"loading\">\r\n\r\n    <a-row type=\"flex\">\r\n      <a-col>\r\n        <slot name=\"buttonBefore\" :target=\"getVM()\"/>\r\n      </a-col>\r\n      <a-col>\r\n        <!-- 操作按钮 -->\r\n        <div v-if=\"actionButton\" class=\"action-button\">\r\n          <a-button type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\">新增</a-button>\r\n          <span class=\"gap\"></span>\r\n          <template v-if=\"selectedRowIds.length>0\">\r\n            <a-popconfirm\r\n              :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\r\n              @confirm=\"handleConfirmDelete\">\r\n              <a-button type=\"primary\" icon=\"minus\">删除</a-button>\r\n              <span class=\"gap\"></span>\r\n            </a-popconfirm>\r\n            <template v-if=\"showClearSelectButton\">\r\n              <a-button icon=\"delete\" @click=\"handleClickClearSelection\">清空选择</a-button>\r\n              <span class=\"gap\"></span>\r\n            </template>\r\n          </template>\r\n        </div>\r\n      </a-col>\r\n      <a-col>\r\n        <slot name=\"buttonAfter\" :target=\"getVM()\"/>\r\n      </a-col>\r\n    </a-row>\r\n\r\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\r\n      <!-- 渲染表头 -->\r\n      <div class=\"thead\" ref=\"thead\">\r\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\r\n          <!-- 左侧固定td  -->\r\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\r\n            <span></span>\r\n          </div>\r\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\r\n            <!--:indeterminate=\"true\"-->\r\n            <a-checkbox\r\n              :checked=\"getSelectAll\"\r\n              :indeterminate=\"getSelectIndeterminate\"\r\n              @change=\"handleChangeCheckedAll\"\r\n            />\r\n          </div>\r\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\r\n            <span>#</span>\r\n          </div>\r\n          <!-- 右侧动态生成td -->\r\n          <template v-for=\"col in columns\">\r\n            <div\r\n              v-show=\"col.type !== formTypes.hidden\"\r\n              class=\"td\"\r\n              :key=\"col.key\"\r\n              :style=\"buildTdStyle(col)\">\r\n\r\n              <span>{{ col.title }}</span>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\r\n\r\n\r\n        <!-- 渲染主体 body -->\r\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\r\n          <!-- 扩展高度 -->\r\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\r\n          <!-- 无数据时显示 -->\r\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\r\n            <span>暂无数据</span>\r\n          </div>\r\n<!--           v-model=\"rows\"-->\r\n          <draggable :value=\"rows\" handle=\".td-ds-icons\" @end=\"handleDragMoveEnd\">\r\n\r\n            <!-- 动态生成tr -->\r\n            <template v-for=\"(row,rowIndex) in rows\">\r\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\r\n              <div\r\n                v-if=\"\r\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\r\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\r\n              \"\r\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\r\n                :data-idx=\"rowIndex\"\r\n                class=\"tr\"\r\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\r\n                :style=\"buildTrStyle(rowIndex)\"\r\n                :key=\"row.id\">\r\n                <!-- 左侧固定td  -->\r\n\r\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\r\n                  <div class=\"td-ds-icons\">\r\n                    <a-icon type=\"align-left\"/>\r\n                    <a-icon type=\"align-right\"/>\r\n                  </div>\r\n                </div>\r\n\r\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\r\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\r\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\r\n                    <a-checkbox\r\n                      :id=\"id\"\r\n                      :key=\"i\"\r\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\r\n                      @change=\"handleChangeLeftCheckbox\"/>\r\n                  </template>\r\n                </div>\r\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\r\n                  <span>{{ rowIndex+1 }}</span>\r\n                </div>\r\n                <!-- 右侧动态生成td -->\r\n                <div\r\n                  class=\"td\"\r\n                  v-for=\"col in columns\"\r\n                  v-show=\"col.type !== formTypes.hidden\"\r\n                  :key=\"col.key\"\r\n                  :style=\"buildTdStyle(col)\">\r\n\r\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\r\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\r\n\r\n                    <!-- native input -->\r\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\r\n                      <a-tooltip\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                        <input\r\n                          :id=\"id\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          @blur=\"(e)=>{handleBlurCommono(e.target,rowIndex,row,col)}\"\r\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\"/>\r\n\r\n                      </a-tooltip>\r\n\r\n                    </label>\r\n                    <!-- checkbox -->\r\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\r\n                      <a-checkbox\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        v-bind=\"buildProps(row,col)\"\r\n                        :checked=\"checkboxValues[id]\"\r\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\r\n                      />\r\n                    </template>\r\n                    <!-- select -->\r\n                    <template v-else-if=\"col.type === formTypes.select\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                      <span\r\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                        <a-select\r\n                          :id=\"id\"\r\n                          :key=\"i\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          style=\"width: 100%;\"\r\n                          :value=\"selectValues[id]\"\r\n                          :options=\"col.options\"\r\n                          :getPopupContainer=\"getParentContainer\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          :filterOption=\"(i,o)=>handleSelectFilterOption(i,o,col)\"\r\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\r\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\r\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\r\n                        >\r\n\r\n                          <!--<template v-for=\"(opt,optKey) in col.options\">-->\r\n                          <!--<a-select-option :value=\"opt.value\" :key=\"optKey\">{{ opt.title }}</a-select-option>-->\r\n                          <!--</template>-->\r\n                        </a-select>\r\n                      </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- date -->\r\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                      <span\r\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                        <j-date\r\n                          :id=\"id\"\r\n                          :key=\"i\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          style=\"width: 100%;\"\r\n                          :value=\"jdateValues[id]\"\r\n                          :getCalendarContainer=\"getParentContainer\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          :trigger-change=\"true\"\r\n                          :showTime=\"col.type === formTypes.datetime\"\r\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\r\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"/>\r\n\r\n                      </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n\r\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\r\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\r\n                        <a-input\r\n                          :key=\"fileKey\"\r\n                          :readOnly=\"true\"\r\n                          :value=\"file.name\"\r\n                        >\r\n\r\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\r\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\r\n                              <a-icon type=\"loading\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\r\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else title=\"上传失败\">\r\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                          <template slot=\"addonAfter\" style=\"width: 30px\">\r\n                            <a-tooltip title=\"删除并重新上传\">\r\n                              <a-icon\r\n                                v-if=\"file.status!=='uploading'\"\r\n                                type=\"close-circle\"\r\n                                style=\"cursor: pointer;\"\r\n                                @click=\"()=>handleClickDelFile(id)\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                        </a-input>\r\n                      </template>\r\n\r\n                      <div :hidden=\"uploadValues[id] != null\">\r\n\r\n                        <a-upload\r\n                          name=\"file\"\r\n                          :data=\"{'isup':1}\"\r\n                          :multiple=\"false\"\r\n                          :action=\"col.action\"\r\n                          :headers=\"uploadGetHeaders(row,col)\"\r\n                          :showUploadList=\"false\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\r\n                        >\r\n                          <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\r\n                        </a-upload>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                    <!-- update-begin-author:taoyan date:0827 for：popup -->\r\n                    <template v-else-if=\"col.type === formTypes.popup\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n                        <span\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                          <j-popup\r\n                            :id=\"id\"\r\n                            :key=\"i\"\r\n                            v-bind=\"buildProps(row,col)\"\r\n                            :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                            style=\"width: 100%;\"\r\n                            :value=\"getPopupValue(id)\"\r\n                            :field=\"col.key\"\r\n                            :org-fields=\"col.orgFieldse\"\r\n                            :dest-fields=\"col.destFields\"\r\n                            :code=\"col.popupCode\"\r\n                            @input=\"(value,others)=>popupCallback(value,others,id,row,col,rowIndex)\"/>\r\n                        </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- update-end-author:taoyan date:0827 for：popup -->\r\n\r\n                    <!-- update-beign-author:taoyan date:0827 for：文件/图片逻辑新增 -->\r\n                    <div v-else-if=\"col.type === formTypes.file\" :key=\"i\">\r\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\r\n                        <a-input\r\n                          :key=\"fileKey\"\r\n                          :readOnly=\"true\"\r\n                          :value=\"file.name\"\r\n                        >\r\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\r\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\r\n                              <a-icon type=\"loading\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\r\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else title=\"上传失败\">\r\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                          <template slot=\"addonAfter\" style=\"width: 30px\">\r\n                            <a-tooltip title=\"删除并重新上传\">\r\n                              <a-icon\r\n                                v-if=\"file.status!=='uploading'\"\r\n                                type=\"close-circle\"\r\n                                style=\"cursor: pointer;\"\r\n                                @click=\"()=>handleClickDelFile(id)\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                        </a-input>\r\n                      </template>\r\n\r\n                      <div :hidden=\"uploadValues[id] != null\">\r\n\r\n                        <a-upload\r\n                          name=\"file\"\r\n                          :data=\"{'isup':1}\"\r\n                          :multiple=\"false\"\r\n                          :action=\"getUploadAction(col.action)\"\r\n                          :headers=\"uploadGetHeaders(row,col)\"\r\n                          :showUploadList=\"false\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\r\n                        >\r\n                          <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\r\n                        </a-upload>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                    <div v-else-if=\"col.type === formTypes.image\" :key=\"i\">\r\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\r\n                        <div :key=\"fileKey\" style=\"position: relative;\">\r\n                          <img :src=\"getCellImageView(id)\" style=\"height:32px;max-width:100px !important;\" alt=\"无图片\"/>\r\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\r\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\r\n                              <a-icon type=\"loading\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\r\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else title=\"上传失败\">\r\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                          <template style=\"width: 30px\">\r\n                            <a-tooltip title=\"删除并重新上传\" style=\"margin-left:5px\">\r\n                              <a-icon\r\n                                v-if=\"file.status!=='uploading'\"\r\n                                type=\"close-circle\"\r\n                                style=\"cursor: pointer;\"\r\n                                @click=\"()=>handleClickDelFile(id)\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                        </div>\r\n                      </template>\r\n\r\n                      <div :hidden=\"uploadValues[id] != null\">\r\n\r\n                        <a-upload\r\n                          name=\"file\"\r\n                          :data=\"{'isup':1}\"\r\n                          :multiple=\"false\"\r\n                          :action=\"getUploadAction(col.action)\"\r\n                          :headers=\"uploadGetHeaders(row,col)\"\r\n                          :showUploadList=\"false\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\r\n                        >\r\n                          <a-button icon=\"upload\">请上传图片</a-button>\r\n                        </a-upload>\r\n                      </div>\r\n\r\n                    </div>\r\n                    <!-- update-end-author:taoyan date:0827 for：图片逻辑新增 -->\r\n\r\n\r\n                    <!-- radio-begin -->\r\n                    <template v-else-if=\"col.type === formTypes.radio\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n                        <span\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n                          <a-radio-group\r\n                            :id=\"id\"\r\n                            :key=\"i\"\r\n                            v-bind=\"buildProps(row,col)\"\r\n                            :value=\"radioValues[id]\"\r\n                            @change=\"(e)=>handleRadioChange(e.target.value,id,row,col)\">\r\n                            <a-radio v-for=\"(item, key) in col.options\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\r\n                          </a-radio-group>\r\n                        </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- radio-end -->\r\n\r\n\r\n                    <!-- select多选 -begin -->\r\n                    <template v-else-if=\"col.type === formTypes.list_multi\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                        <span\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                          <a-select\r\n                            :id=\"id\"\r\n                            :key=\"i\"\r\n                            mode=\"multiple\"\r\n                            :maxTagCount=\"1\"\r\n                            v-bind=\"buildProps(row,col)\"\r\n                            style=\"width: 100%;\"\r\n                            :value=\"multiSelectValues[id]\"\r\n                            :options=\"col.options\"\r\n                            :getPopupContainer=\"getParentContainer\"\r\n                            :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                            @change=\"(v)=>handleMultiSelectChange(v,id,row,col)\"\r\n                            allowClear>\r\n                          </a-select>\r\n                        </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- select多选 -end -->\r\n\r\n                    <!-- select搜索 -begin -->\r\n                    <template v-else-if=\"col.type === formTypes.sel_search\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                        <span\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                          <a-select\r\n                            :id=\"id\"\r\n                            :key=\"i\"\r\n                            showSearch\r\n                            optionFilterProp=\"children\"\r\n                            :filterOption=\"filterOption\"\r\n                            v-bind=\"buildProps(row,col)\"\r\n                            style=\"width: 100%;\"\r\n                            :value=\"searchSelectValues[id]\"\r\n                            :options=\"col.options\"\r\n                            :getPopupContainer=\"getParentContainer\"\r\n                            :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                            @change=\"(v)=>handleSearchSelectChange(v,id,row,col)\"\r\n                            allowClear>\r\n                          </a-select>\r\n                        </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- select搜索 -end -->\r\n\r\n\r\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\r\n                      <slot\r\n                        :name=\"(col.slot || col.slotName) || col.key\"\r\n                        :index=\"rowIndex\"\r\n                        :text=\"inputValues[rowIndex][col.key]\"\r\n                        :column=\"col\"\r\n                        :rowId=\"removeCaseId(row.id)\"\r\n                        :getValue=\"()=>_getValueForSlot(row.id)\"\r\n                        :caseId=\"caseId\"\r\n                        :allValues=\"_getAllValuesForSlot()\"\r\n                        :target=\"getVM()\"\r\n                      />\r\n                    </div>\r\n\r\n                    <!-- else (normal) -->\r\n                    <span v-else :key=\"i\" v-bind=\"buildProps(row,col)\">{{ inputValues[rowIndex][col.key] }}</span>\r\n                  </template>\r\n                </div>\r\n              </div>\r\n              <!-- -- tr end -- -->\r\n\r\n            </template>\r\n          </draggable>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </a-spin>\r\n</template>\r\n\r\n<script>\r\n  import Vue from 'vue'\r\n  import Draggable from 'vuedraggable'\r\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\r\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\r\n  import { cloneObject, randomString } from '@/utils/util'\r\n  import JDate from '@/components/jeecg/JDate'\r\n  import { initDictOptions } from '@/components/dict/JDictSelectUtil'\r\n\r\n\r\n  // 行高，需要在实例加载完成前用到\r\n  let rowHeight = 61\r\n\r\n  export default {\r\n    name: 'JEditableTable',\r\n    components: { JDate, Draggable },\r\n    props: {\r\n      // 列信息\r\n      columns: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      // 数据源\r\n      dataSource: {\r\n        type: Array,\r\n        required: true,\r\n        default: () => []\r\n      },\r\n      // 是否显示操作按钮\r\n      actionButton: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否显示行号\r\n      rowNumber: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否可选择行\r\n      rowSelection: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 页面是否在加载中\r\n      loading: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 页面是否在加载中\r\n      maxHeight: {\r\n        type: Number,\r\n        default: 400\r\n      },\r\n      // 要禁用的行\r\n      disabledRows: {\r\n        type: Object,\r\n        default() {\r\n          return {}\r\n        }\r\n      },\r\n      // 是否禁用全部组件\r\n      disabled: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否可拖拽排序\r\n      dragSort: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      dragSortKey: {\r\n        type: String,\r\n        default: 'orderNum'\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        // caseId，用于防止有多个实例的时候会冲突\r\n        caseId: `_jet-${randomString(6)}-`,\r\n        // 存储document element 对象\r\n        el: {\r\n          inputTable: null,\r\n          tbody: null\r\n        },\r\n        // 存储各个div的style\r\n        style: {\r\n          // 'max-height': '400px'\r\n          tbody: { left: '0px' },\r\n          // 左侧固定td的style\r\n          tdLeft: { 'min-width': '4%', 'max-width': '45px' },\r\n          tdLeftDs: { 'min-width': '30px', 'max-width': '35px' },\r\n        },\r\n        // 表单的类型\r\n        formTypes: FormTypes,\r\n        // 行数据\r\n        rows: [],\r\n        // 行高，height + padding + border\r\n        rowHeight,\r\n        // 滚动条顶部距离\r\n        scrollTop: 0,\r\n        // 绑定 select 的值\r\n        selectValues: {},\r\n        // 绑定 checkbox 的值\r\n        checkboxValues: {},\r\n        // 绑定 jdate 的值\r\n        jdateValues: {},\r\n        // file 信息\r\n        uploadValues: {},\r\n        //popup信息\r\n        popupValues:{},\r\n\r\n        radioValues:{},\r\n        metaCheckboxValues:{},\r\n        multiSelectValues:{},\r\n        searchSelectValues:{},\r\n        // 绑定左侧选择框已选择的id\r\n        selectedRowIds: [],\r\n        // 存储被删除行的id\r\n        deleteIds: [],\r\n        // 存储显示tooltip的信息\r\n        tooltips: {},\r\n        // 存储没有通过验证的inputId\r\n        notPassedIds: []\r\n      }\r\n    },\r\n    created() {\r\n      // 当前显示的tr\r\n      this.visibleTrEls = []\r\n      this.disabledRowIds = (this.disabledRowIds || [])\r\n    },\r\n    // 计算属性\r\n    computed: {\r\n      // expandHeight = rows.length * rowHeight\r\n      getExpandHeight() {\r\n        return this.rows.length * this.rowHeight\r\n      },\r\n      // 获取是否选择了部分\r\n      getSelectIndeterminate() {\r\n        return (this.selectedRowIds.length > 0 &&\r\n          this.selectedRowIds.length < this.rows.length)\r\n      },\r\n      // 获取是否选择了全部\r\n      getSelectAll() {\r\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\r\n      },\r\n      tbodyStyle() {\r\n        let style = Object.assign({}, this.style.tbody)\r\n        // style['max-height'] = `${this.maxHeight}px`\r\n        style['width'] = this.realTrWidth\r\n        return style\r\n      },\r\n      showClearSelectButton() {\r\n        let count = 0\r\n        for (let key in this.disabledRows) {\r\n          if (this.disabledRows.hasOwnProperty(key)) count++\r\n        }\r\n        return count > 0\r\n      },\r\n      accessToken() {\r\n        return Vue.ls.get(ACCESS_TOKEN)\r\n      },\r\n      realTrWidth() {\r\n        let calcWidth = 'calc('\r\n        this.columns.forEach((column, i) => {\r\n          let { type, width } = column\r\n          // 隐藏字段不参与计算\r\n          if (type !== FormTypes.hidden) {\r\n            if (typeof width === 'number') {\r\n              calcWidth += width + 'px'\r\n            } else if (typeof width === 'string') {\r\n              calcWidth += width\r\n            } else {\r\n              calcWidth += '120px'\r\n            }\r\n\r\n            if (i < this.columns.length - 1) {\r\n              calcWidth += ' + '\r\n            }\r\n          }\r\n        })\r\n        calcWidth += ')'\r\n        // console.log('calcWidth: ', calcWidth)\r\n        return calcWidth\r\n      }\r\n    },\r\n    // 侦听器\r\n    watch: {\r\n      rows:{\r\n        immediate:true,\r\n        handler(val,old) {\r\n          // val.forEach(item => {\r\n          //   for (let inputValue of  this.inputValues) {\r\n          //     if (inputValue.id === item.id) {\r\n          //       item['dbFieldName'] = inputValue['dbFieldName']\r\n          //       break\r\n          //     }\r\n          //   }\r\n          // })\r\n          // console.log('watch.rows:', cloneObject({ val, old }))\r\n        }\r\n      },\r\n      dataSource: {\r\n        immediate: true,\r\n        handler: function (newValue) {\r\n          this.initialize()\r\n\r\n          let rows = []\r\n          let checkboxValues = {}\r\n          let selectValues = {}\r\n          let jdateValues = {}\r\n          let uploadValues = {}\r\n          let popupValues={}\r\n          let radioValues = {}\r\n          let multiSelectValues = {}\r\n          let searchSelectValues = {}\r\n\r\n          // 禁用行的id\r\n          let disabledRowIds = (this.disabledRowIds || [])\r\n          newValue.forEach((data, newValueIndex) => {\r\n            // 判断源数据是否带有id\r\n            if (data.id == null || data.id === '') {\r\n              data.id = this.removeCaseId(this.generateId() + newValueIndex)\r\n            }\r\n\r\n            let value = { id: this.caseId + data.id }\r\n            let row = { id: value.id }\r\n            let disabled = false\r\n            this.columns.forEach(column => {\r\n              let inputId = column.key + value.id\r\n              let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\r\n              if (column.type === FormTypes.checkbox) {\r\n\r\n                // 判断是否设定了customValue（自定义值）\r\n                if (column.customValue instanceof Array) {\r\n                  let customValue = (column.customValue[0] || '').toString()\r\n                  checkboxValues[inputId] = (sourceValue === customValue)\r\n                } else {\r\n                  checkboxValues[inputId] = sourceValue\r\n                }\r\n\r\n              } else if (column.type === FormTypes.select) {\r\n                if (sourceValue) {\r\n                  // 判断是否是多选\r\n                  selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue\r\n                } else {\r\n                  selectValues[inputId] = undefined\r\n                }\r\n\r\n              } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n                jdateValues[inputId] = sourceValue\r\n\r\n              } else if (column.type === FormTypes.slot) {\r\n                if (sourceValue !== 0 && !sourceValue) {\r\n                  value[column.key] = column.defaultValue\r\n                } else {\r\n                  value[column.key] = sourceValue\r\n                }\r\n\r\n              } else if (column.type === FormTypes.popup) {\r\n                popupValues[inputId] = sourceValue\r\n              } else if (column.type === FormTypes.radio) {\r\n                radioValues[inputId] = sourceValue\r\n              } else if (column.type === FormTypes.sel_search) {\r\n                searchSelectValues[inputId] = sourceValue\r\n              } else if (column.type === FormTypes.list_multi) {\r\n                if(sourceValue.length>0){\r\n                  multiSelectValues[inputId] = sourceValue.split(\",\")\r\n                }else{\r\n                  multiSelectValues[inputId] = []\r\n                }\r\n              } else if (column.type === FormTypes.file || column.type === FormTypes.image) {\r\n                if(sourceValue){\r\n                  let fileName = sourceValue.substring(sourceValue.lastIndexOf(\"/\")+1)\r\n                  uploadValues[inputId] = {\r\n                    name: fileName,\r\n                    status: 'done',\r\n                    path:sourceValue\r\n                  }\r\n                }\r\n              } else {\r\n                value[column.key] = sourceValue\r\n              }\r\n\r\n              // 解析disabledRows\r\n              for (let columnKey in this.disabledRows) {\r\n                // 判断是否有该属性\r\n                if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\r\n                  if (disabled !== true) {\r\n                    let temp = this.disabledRows[columnKey]\r\n                    // 禁用规则可以是一个数组\r\n                    if (temp instanceof Array) {\r\n                      disabled = temp.includes(data[columnKey])\r\n                    } else {\r\n                      disabled = (temp === data[columnKey])\r\n                    }\r\n                    if (disabled) {\r\n                      disabledRowIds.push(row.id)\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            })\r\n            this.inputValues.push(value)\r\n            rows.push(row)\r\n          })\r\n          this.disabledRowIds = disabledRowIds\r\n          this.checkboxValues = checkboxValues\r\n          this.selectValues = selectValues\r\n          this.jdateValues = jdateValues\r\n          this.rows = rows\r\n          this.uploadValues = uploadValues\r\n          this.popupValues = popupValues\r\n          this.radioValues = radioValues\r\n          this.multiSelectValues = multiSelectValues\r\n          this.searchSelectValues = searchSelectValues\r\n\r\n          // 更新form表单的值\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n\r\n        }\r\n      },\r\n      columns: {\r\n        immediate: true,\r\n        handler(columns) {\r\n          columns.forEach(column => {\r\n            if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\r\n              // 兼容 旧版本 options\r\n              if (column.options instanceof Array) {\r\n                column.options = column.options.map(item => {\r\n                  if (item) {\r\n                    return {\r\n                      ...item,\r\n                      text: item.text || item.title,\r\n                      title: item.text || item.title\r\n                    }\r\n                  }\r\n                  return {}\r\n                })\r\n              }\r\n              if (column.dictCode) {\r\n                this._loadDictConcatToOptions(column)\r\n              }\r\n            }\r\n          })\r\n        }\r\n      },\r\n      // 当selectRowIds改变时触发事件\r\n      selectedRowIds(newValue) {\r\n        this.$emit('selectRowChange', cloneObject(newValue).map(i => this.removeCaseId(i)))\r\n      }\r\n    },\r\n    mounted() {\r\n      // 获取document element对象\r\n      let elements = {};\r\n      ['inputTable', 'tbody'].forEach(id => {\r\n        elements[id] = document.getElementById(this.caseId + id)\r\n      })\r\n      this.el = elements\r\n\r\n      let vm = this\r\n      /** 监听滚动条事件 */\r\n      this.el.inputTable.onscroll = function (event) {\r\n        vm.syncScrollBar(event.target.scrollLeft)\r\n      }\r\n      this.el.tbody.onscroll = function (event) {\r\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\r\n      }\r\n\r\n      let { thead, scrollView } = this.$refs\r\n      scrollView.onscroll = function (event) {\r\n\r\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\r\n\r\n        thead.scrollLeft = event.target.scrollLeft\r\n\r\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\r\n\r\n        vm.recalcTrHiddenItem(event.target.scrollTop)\r\n\r\n      }\r\n\r\n    },\r\n    methods: {\r\n\r\n      /** 初始化列表 */\r\n      initialize() {\r\n        // inputValues：用来存储input表单的值\r\n        // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\r\n        // 示例：\r\n        // [{\r\n        //    id: \"_jet-4sp0iu-15541771111770\"\r\n        //    dbDefaultVal: \"aaa\",\r\n        //    dbFieldName: \"bbb\",\r\n        //    dbFieldTxt: \"ccc\",\r\n        //    dbLength: 32\r\n        // }]\r\n        this.inputValues = []\r\n        this.visibleTrEls = []\r\n        this.rows = []\r\n        this.deleteIds = []\r\n        this.selectValues = {}\r\n        this.checkboxValues = {}\r\n        this.jdateValues = {}\r\n        this.selectedRowIds = []\r\n        this.tooltips = {}\r\n        this.notPassedIds = []\r\n        this.uploadValues=[]\r\n        this.popupValues=[]\r\n        this.radioValues=[]\r\n        this.multiSelectValues = []\r\n        this.searchSelectValues = []\r\n        this.scrollTop = 0\r\n        this.$nextTick(() => {\r\n          this.el.tbody.scrollTop = 0\r\n        })\r\n      },\r\n\r\n      /** 同步滚动条状态 */\r\n      syncScrollBar(scrollLeft) {\r\n        // this.style.tbody.left = `${scrollLeft}px`\r\n        // this.el.tbody.scrollLeft = scrollLeft\r\n      },\r\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\r\n      resetScrollTop(top) {\r\n        let { scrollView } = this.$refs\r\n        if (top != null && typeof top === 'number') {\r\n          scrollView.scrollTop = top\r\n        } else {\r\n          scrollView.scrollTop = this.scrollTop\r\n        }\r\n      },\r\n      /** 重新计算需要隐藏或显示的tr */\r\n      recalcTrHiddenItem(top) {\r\n        let diff = top - this.scrollTop\r\n        if (diff < 0) {\r\n          diff = this.scrollTop - top\r\n        }\r\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\r\n        if (diff >= this.rowHeight * 0.3) {\r\n          this.scrollTop = top\r\n          // 更新form表单的值\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n        }\r\n      },\r\n      /** 生成id */\r\n      generateId(rows) {\r\n        if (!(rows instanceof Array)) {\r\n          rows = this.rows || []\r\n        }\r\n        let timestamp = new Date().getTime()\r\n        return `${this.caseId}${timestamp}${rows.length}`\r\n      },\r\n      /** push 一条数据 */\r\n      push(record, update = true, rows) {\r\n        if (!(rows instanceof Array)) {\r\n          rows = cloneObject(this.rows) || []\r\n        }\r\n\r\n        if (record.id == null) {\r\n          record.id = this.generateId(rows)\r\n          // let timestamp = new Date().getTime()\r\n          // record.id = `${this.caseId}${timestamp}${rows.length}`\r\n        }\r\n        if (record.id.indexOf(this.caseId) === -1) {\r\n          record.id = this.caseId + record.id\r\n        }\r\n        let row = { id: record.id }\r\n        let value = { id: row.id }\r\n        let checkboxValues = Object.assign({}, this.checkboxValues)\r\n        let selectValues = Object.assign({}, this.selectValues)\r\n        let jdateValues = Object.assign({}, this.jdateValues)\r\n        this.columns.forEach(column => {\r\n          let key = column.key\r\n          let inputId = key + row.id\r\n          // record中是否有该列的值\r\n          let recordHasValue = record[key] != null\r\n          if (column.type === FormTypes.input) {\r\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\r\n\r\n          } else if (column.type === FormTypes.inputNumber) {\r\n            // 判断是否是排序字段，如果是就赋最大值\r\n            if (column.isOrder === true) {\r\n              value[key] = this.getInputNumberMaxValue(column) + 1\r\n            } else {\r\n              value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\r\n            }\r\n\r\n          } else if (column.type === FormTypes.checkbox) {\r\n            checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked\r\n\r\n          } else if (column.type === FormTypes.select) {\r\n            let selected = column.defaultValue\r\n            if (selected !== 0 && !selected) {\r\n              selected = undefined\r\n            }\r\n            // 判断多选\r\n            if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\r\n              selected = selected.split(',')\r\n            }\r\n            selectValues[inputId] = recordHasValue ? record[key] : selected\r\n\r\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n            jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue\r\n\r\n          } else if (column.type === FormTypes.slot) {\r\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || '')\r\n\r\n          } else {\r\n            value[key] = recordHasValue ? record[key] : ''\r\n          }\r\n        })\r\n        rows.push(row)\r\n        this.inputValues.push(value)\r\n        this.checkboxValues = checkboxValues\r\n        this.selectValues = selectValues\r\n        this.jdateValues = jdateValues\r\n\r\n        if (this.dragSort) {\r\n          this.inputValues.forEach((item, index) => {\r\n            item[this.dragSortKey] = (index + 1)\r\n          })\r\n        }\r\n\r\n        if (update) {\r\n          this.rows = rows\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n        }\r\n        return rows\r\n      },\r\n      /** 获取某一数字输入框列中的最大的值 */\r\n      getInputNumberMaxValue(column) {\r\n        let maxNum = 0\r\n        this.inputValues.forEach((item, index) => {\r\n          let val = item[column.key], num\r\n          try {\r\n            num = parseInt(val)\r\n          } catch {\r\n            num = 0\r\n          }\r\n          // 把首次循环的结果当成最大值\r\n          if (index === 0) {\r\n            maxNum = num\r\n          } else {\r\n            maxNum = (num > maxNum) ? num : maxNum\r\n          }\r\n        })\r\n        return maxNum\r\n      },\r\n      /** 添加一行 */\r\n      add(num = 1, forceScrollToBottom = false) {\r\n        if (num < 1) return\r\n        // let timestamp = new Date().getTime()\r\n        let rows = this.rows\r\n        let row\r\n        for (let i = 0; i < num; i++) {\r\n          // row = { id: `${this.caseId}${timestamp}${rows.length}` }\r\n          row = { id: this.generateId(rows) }\r\n          rows = this.push(row, false, rows)\r\n        }\r\n        this.rows = rows\r\n\r\n        let rowValue = this.getValuesSync({\r\n          validate: false,\r\n          rowIds: [this.removeCaseId(row.id)]\r\n        }).values[0]\r\n\r\n        this.$nextTick(() => {\r\n          this.updateFormValues()\r\n        })\r\n        // 触发add事件\r\n        this.$emit('added', {\r\n          row: rowValue,\r\n          target: this\r\n        })\r\n        // 设置滚动条位置\r\n        let tbody = this.el.tbody\r\n        let offsetHeight = tbody.offsetHeight\r\n        let realScrollTop = tbody.scrollTop + offsetHeight\r\n        if (forceScrollToBottom === false) {\r\n          // 只有滚动条在底部的时候才自动滚动\r\n          if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\r\n            return\r\n          }\r\n        }\r\n        this.$nextTick(() => {\r\n          tbody.scrollTop = tbody.scrollHeight\r\n        })\r\n      },\r\n      /** 删除被选中的行 */\r\n      removeSelectedRows() {\r\n        this.removeRows(this.selectedRowIds)\r\n        this.selectedRowIds = []\r\n      },\r\n      /** 删除一行或多行 */\r\n      removeRows(id) {\r\n        let ids = id\r\n        if (!(id instanceof Array)) {\r\n          if (typeof id === 'string') {\r\n            ids = [id]\r\n          } else {\r\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\r\n          }\r\n        }\r\n\r\n        let rows = cloneObject(this.rows)\r\n        ids.forEach(removeId => {\r\n          // 找到每个id对应的真实index并删除\r\n          const findAndDelete = (arr) => {\r\n            for (let i = 0; i < arr.length; i++) {\r\n              if (arr[i].id === removeId || arr[i].id === this.caseId + removeId) {\r\n                arr.splice(i, 1)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          // 找到rows对应的index，并删除\r\n          if (findAndDelete(rows)) {\r\n            // 找到values对应的index，并删除\r\n            findAndDelete(this.inputValues)\r\n            // 将caseId去除\r\n            let id = this.removeCaseId(removeId)\r\n            this.deleteIds.push(id)\r\n          }\r\n        })\r\n        this.rows = rows\r\n        this.$emit('deleted', this.getDeleteIds())\r\n        this.$nextTick(() => {\r\n          // 更新formValues\r\n          this.updateFormValues()\r\n        })\r\n        return true\r\n      },\r\n\r\n      /** 获取表格表单里的值（同步版） */\r\n      getValuesSync(options = {}) {\r\n        let { validate, rowIds } = options\r\n        if (typeof validate !== 'boolean') validate = true\r\n        if (!(rowIds instanceof Array)) rowIds = null\r\n        // console.log('options:', { validate, rowIds })\r\n\r\n        let error = 0\r\n        let inputValues = cloneObject(this.inputValues)\r\n        let tooltips = Object.assign({}, this.tooltips)\r\n        let notPassedIds = cloneObject(this.notPassedIds)\r\n        // 用于存储合并后的值\r\n        let values = []\r\n        // 遍历inputValues来获取每行的值\r\n        for (let value of inputValues) {\r\n          let rowIdsFlag = false\r\n          // 如果带有rowIds，那么就只存这几行的数据\r\n          if (rowIds == null) {\r\n            rowIdsFlag = true\r\n          } else {\r\n            for (let rowId of rowIds) {\r\n              if (rowId === value.id || `${this.caseId}${rowId}` === value.id) {\r\n                rowIdsFlag = true\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!rowIdsFlag) continue\r\n\r\n          this.columns.forEach(column => {\r\n            let inputId = column.key + value.id\r\n            if (column.type === FormTypes.checkbox) {\r\n              let checked = this.checkboxValues[inputId]\r\n              if (column.customValue instanceof Array) {\r\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\r\n              } else {\r\n                value[column.key] = checked\r\n              }\r\n\r\n            } else if (column.type === FormTypes.select) {\r\n              let selected = this.selectValues[inputId]\r\n              if (selected instanceof Array) {\r\n                value[column.key] = cloneObject(selected)\r\n              } else {\r\n                value[column.key] = selected\r\n              }\r\n\r\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n              value[column.key] = this.jdateValues[inputId]\r\n\r\n            } else if (column.type === FormTypes.upload) {\r\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\r\n\r\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\r\n              let currUploadObj = cloneObject(this.uploadValues[inputId] || null)\r\n              if(currUploadObj){\r\n                value[column.key] = currUploadObj['path'] || null\r\n              }\r\n\r\n            } else if (column.type === FormTypes.popup) {\r\n              if(!value[column.key]){\r\n                value[column.key] = this.popupValues[inputId] || null\r\n              }\r\n            } else if (column.type === FormTypes.radio) {\r\n              value[column.key] = this.radioValues[inputId]\r\n            }else if (column.type === FormTypes.sel_search) {\r\n              value[column.key] = this.searchSelectValues[inputId]\r\n            }else if (column.type === FormTypes.list_multi) {\r\n              if(!this.multiSelectValues[inputId] || this.multiSelectValues[inputId].length==0){\r\n                value[column.key] = ''\r\n              }else{\r\n                value[column.key] = this.multiSelectValues[inputId].join(\",\")\r\n              }\r\n            }\r\n\r\n\r\n            // 检查表单验证\r\n            if (validate === true) {\r\n              let results = this.validateOneInput(value[column.key], value, column, notPassedIds, false, 'getValues')\r\n              tooltips[inputId] = results[0]\r\n              if (tooltips[inputId].passed === false) {\r\n                error++\r\n                // if (error++ === 0) {\r\n                // let element = document.getElementById(inputId)\r\n                // while (element.className !== 'tr') {\r\n                //   element = element.parentElement\r\n                // }\r\n                // this.jumpToId(inputId, element)\r\n                // }\r\n              }\r\n              tooltips[inputId].visible = false\r\n              notPassedIds = results[1]\r\n            }\r\n          })\r\n          // 将caseId去除\r\n          value.id = this.removeCaseId(value.id)\r\n          values.push(value)\r\n\r\n        }\r\n\r\n        if (validate === true) {\r\n          this.tooltips = tooltips\r\n          this.notPassedIds = notPassedIds\r\n        }\r\n        return { error, values }\r\n      },\r\n\r\n      /** 获取表格表单里的值 */\r\n      getValues(callback, validate = true, rowIds) {\r\n        let result = this.getValuesSync({ validate, rowIds })\r\n        if (typeof callback === 'function') {\r\n          callback(result.error, result.values)\r\n        }\r\n      },\r\n      /** getValues的Promise版 */\r\n      getValuesPromise(validate = true, rowIds) {\r\n        return new Promise((resolve, reject) => {\r\n          let { error, values } = this.getValuesSync({ validate, rowIds })\r\n          if (error === 0) {\r\n            resolve(values)\r\n          } else {\r\n            reject(VALIDATE_NO_PASSED)\r\n          }\r\n        })\r\n      },\r\n      /** 获取被删除项的id */\r\n      getDeleteIds() {\r\n        return cloneObject(this.deleteIds)\r\n      },\r\n      /** 获取所有的数据，包括values、deleteIds */\r\n      getAll(validate) {\r\n        return new Promise((resolve, reject) => {\r\n          let deleteIds = this.getDeleteIds()\r\n          this.getValuesPromise(validate).then((values) => {\r\n            resolve({ values, deleteIds })\r\n          }).catch(error => {\r\n            reject(error)\r\n          })\r\n        })\r\n      },\r\n      /** Sync 获取所有的数据，包括values、deleteIds */\r\n      getAllSync(validate, rowIds) {\r\n        let result = this.getValuesSync({ validate, rowIds })\r\n        result.deleteIds = this.getDeleteIds()\r\n        return result\r\n      },\r\n      // slot 获取值\r\n      _getValueForSlot(rowId) {\r\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\r\n      },\r\n      _getAllValuesForSlot() {\r\n        return cloneObject({\r\n          inputValues: this.inputValues,\r\n          selectValues: this.selectValues,\r\n          checkboxValues: this.checkboxValues,\r\n          jdateValues: this.jdateValues,\r\n          uploadValues: this.uploadValues,\r\n          popupValues: this.popupValues,\r\n          radioValues: this.radioValues,\r\n          multiSelectValues: this.multiSelectValues,\r\n          searchSelectValues: this.searchSelectValues,\r\n        })\r\n      },\r\n      /** 设置某行某列的值 */\r\n      setValues(values) {\r\n\r\n        values.forEach(item => {\r\n          let { rowKey, values: newValues } = item\r\n          for (let newValueKey in newValues) {\r\n            if (newValues.hasOwnProperty(newValueKey)) {\r\n              let newValue = newValues[newValueKey]\r\n              let edited = false // 已被修改\r\n              this.inputValues.forEach(value => {\r\n                // 在inputValues中找到了该字段\r\n                if (`${this.caseId}${rowKey}` === value.id) {\r\n                  if (value.hasOwnProperty(newValueKey)) {\r\n                    edited = true\r\n                    value[newValueKey] = newValue\r\n                  }\r\n                }\r\n              })\r\n              let modelKey = `${newValueKey}${this.caseId}${rowKey}`\r\n              // 在 selectValues 中寻找值\r\n              if (!edited && this.selectValues.hasOwnProperty(modelKey)) {\r\n                if (newValue !== 0 && !newValue) {\r\n                  this.selectValues[modelKey] = undefined\r\n                } else {\r\n                  this.selectValues[modelKey] = newValue\r\n                }\r\n                edited = true\r\n              }\r\n              // 在 checkboxValues 中寻找值\r\n              if (!edited && this.checkboxValues.hasOwnProperty(modelKey)) {\r\n                this.checkboxValues[modelKey] = newValue\r\n                edited = true\r\n              }\r\n              // 在 jdateValues 中寻找值\r\n              if (!edited && this.jdateValues.hasOwnProperty(modelKey)) {\r\n                this.jdateValues[modelKey] = newValue\r\n                edited = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n        // 强制更新formValues\r\n        this.forceUpdateFormValues()\r\n      },\r\n\r\n      /** 跳转到指定位置 */\r\n      // jumpToId(id, element) {\r\n      //   if (element == null) {\r\n      //     element = document.getElementById(id)\r\n      //   }\r\n      //   if (element != null) {\r\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\r\n      //     this.el.tbody.scrollTop = element.offsetTop\r\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\r\n      //   }\r\n      // },\r\n\r\n      /** 验证单个表单 */\r\n      validateOneInput(value, row, column, notPassedIds, update = false, validType = 'input') {\r\n        let tooltips = Object.assign({}, this.tooltips)\r\n        // let notPassedIds = cloneObject(this.notPassedIds)\r\n        let inputId = column.key + row.id\r\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\r\n\r\n        let [passed, message] = this.validateValue(column.validateRules, value)\r\n\r\n        const nextThen = res => {\r\n          let [passed, message] = res\r\n          if (passed == null) {\r\n            // debugger\r\n          }\r\n          if (passed == null && tooltips[inputId].visible != null) {\r\n            return\r\n          }\r\n          passed = passed == null ? true : passed\r\n          tooltips[inputId].visible = !passed\r\n          tooltips[inputId].passed = passed\r\n          let index = notPassedIds.indexOf(inputId)\r\n          let borderColor = null, boxShadow = null\r\n          if (!passed) {\r\n            tooltips[inputId].title = this.replaceProps(column, message)\r\n            borderColor = 'red'\r\n            boxShadow = `0 0 0 2px rgba(255, 0, 0, 0.2)`\r\n            if (index === -1) notPassedIds.push(inputId)\r\n          } else {\r\n            if (index !== -1) notPassedIds.splice(index, 1)\r\n          }\r\n\r\n          let element = document.getElementById(inputId)\r\n          if (element != null) {\r\n            // select 在 .ant-select-selection 上设置 border-color\r\n            if (column.type === FormTypes.select) {\r\n              element = element.getElementsByClassName('ant-select-selection')[0]\r\n            }\r\n            // jdate 在 input 上设置 border-color\r\n            if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n              element = element.getElementsByTagName('input')[0]\r\n            }\r\n            element.style.borderColor = borderColor\r\n            element.style.boxShadow = boxShadow\r\n          }\r\n          // 是否更新到data\r\n          if (update) {\r\n            this.tooltips = tooltips\r\n            this.notPassedIds = notPassedIds\r\n          }\r\n\r\n        }\r\n\r\n        if (typeof passed === 'function') {\r\n          let executed = false\r\n          passed(validType, value, row, column, (flag, msg) => {\r\n            if (executed) return\r\n            executed = true\r\n            if (typeof msg === 'string') {\r\n              message = msg\r\n            }\r\n            if (flag == null) {\r\n              nextThen([null, message])\r\n            }else  if (typeof flag === 'boolean' && flag) {\r\n              nextThen([true, message])\r\n            } else {\r\n              nextThen([false, message])\r\n            }\r\n\r\n          }, this)\r\n        } else {\r\n          nextThen([passed, message])\r\n        }\r\n\r\n        return [tooltips[inputId], notPassedIds]\r\n      },\r\n      /** 通过规则验证值是否正确 */\r\n      validateValue(rules, value) {\r\n        let passed = true, message = ''\r\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\r\n        if (rules instanceof Array) {\r\n          for (let rule of rules) {\r\n            // 当前值是否为空\r\n            let isNull = (value == null || value === '')\r\n            // 验证规则：非空\r\n            if (rule.required === true && isNull) {\r\n              passed = false\r\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\r\n            // 验证规则：正则表达式\r\n            if (!!rule.pattern && !isNull) {\r\n\r\n              // 兼容 online 的规则\r\n              let foo = [\r\n                { title: '唯一校验', value: 'only', pattern: null },\r\n                { title: '6到16位数字', value: 'n6-16', pattern: /\\d{6,18}/ },\r\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\r\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\r\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\r\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\r\n                { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\r\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\r\n                { title: '数字', value: 'n', pattern: /^-?\\d+\\.?\\d*$/ },\r\n                { title: '整数', value: 'z', pattern: /^[1-9]\\d*$/ },\r\n                { title: '非空', value: '*', pattern: /^.+$/ },\r\n                { title: '6到18位字符串', value: 's6-18', pattern: /^.{6,18}$/ },\r\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\r\n              ]\r\n              let flag = false\r\n              for (let item of foo) {\r\n                if (rule.pattern === item.value && item.pattern) {\r\n                  passed = new RegExp(item.pattern).test(value)\r\n                  flag = true\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\r\n            } else if (typeof rule.handler === 'function') {\r\n              return [rule.handler, rule.message]\r\n            }\r\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\r\n            if (!passed) {\r\n              message = rule.message\r\n              break\r\n            }\r\n          }\r\n        }\r\n        return [passed, message]\r\n      },\r\n\r\n      /** 动态更新表单的值 */\r\n      updateFormValues() {\r\n        let trs = this.el.tbody.getElementsByClassName('tr')\r\n        let trEls = []\r\n        for (let tr of trs) {\r\n          trEls.push(tr)\r\n        }\r\n        // 获取新增的 tr\r\n        let newTrEls = trEls\r\n        if (this.visibleTrEls.length > 0) {\r\n          newTrEls = []\r\n          for (let tr of trEls) {\r\n            let isNewest = true\r\n            for (let vtr of this.visibleTrEls) {\r\n              if (vtr.id === tr.id) {\r\n                isNewest = false\r\n                break\r\n              }\r\n            }\r\n            if (isNewest) {\r\n              newTrEls.push(tr)\r\n            }\r\n          }\r\n        }\r\n        this.visibleTrEls = trEls\r\n        // 向新增的tr中赋值\r\n        newTrEls.forEach(tr => {\r\n          let { idx } = tr.dataset\r\n          let value = this.inputValues[idx]\r\n          for (let key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n              let elid = `${key}${value.id}`\r\n              let el = document.getElementById(elid)\r\n              if (el) {\r\n                el.value = value[key]\r\n              }\r\n            }\r\n          }\r\n        })\r\n      },\r\n      /** 强制更新FormValues */\r\n      forceUpdateFormValues() {\r\n        this.visibleTrEls = []\r\n        this.updateFormValues()\r\n      },\r\n\r\n      /** 全选或取消全选 */\r\n      handleChangeCheckedAll() {\r\n        let selectedRowIds = []\r\n        if (!this.getSelectAll) {\r\n          this.rows.forEach(row => {\r\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\r\n              selectedRowIds.push(row.id)\r\n            }\r\n          })\r\n        }\r\n        this.selectedRowIds = selectedRowIds\r\n      },\r\n      /** 左侧行选择框change事件 */\r\n      handleChangeLeftCheckbox(event) {\r\n        let { id } = event.target\r\n\r\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\r\n          return\r\n        }\r\n\r\n        let index = this.selectedRowIds.indexOf(id)\r\n        if (index !== -1) {\r\n          this.selectedRowIds.splice(index, 1)\r\n        } else {\r\n          this.selectedRowIds.push(id)\r\n        }\r\n\r\n      },\r\n      handleClickAdd() {\r\n        this.add()\r\n      },\r\n      handleConfirmDelete() {\r\n        this.removeSelectedRows()\r\n      },\r\n      handleClickClearSelection() {\r\n        this.clearSelection()\r\n      },\r\n      clearSelection() {\r\n        this.selectedRowIds = []\r\n      },\r\n      /** 用于搜索下拉框中的内容 */\r\n      handleSelectFilterOption(input, option, column) {\r\n        if (column.allowSearch === true) {\r\n          return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n        }\r\n        return true\r\n      },\r\n      /** select 搜索时的事件，用于动态添加options */\r\n      handleSearchSelect(value, id, row, col) {\r\n        if (col.allowSearch !== true && col.allowInput === true) {\r\n          // 是否找到了对应的项，找不到则添加这一项\r\n          let flag = false\r\n          for (let option of col.options) {\r\n            if (option.value.toLocaleString() === value.toLocaleString()) {\r\n              flag = true\r\n              break\r\n            }\r\n          }\r\n          // !!value ：不添加空值\r\n          if (!flag && !!value) {\r\n            // searchAdd 是否是通过搜索添加的\r\n            col.options.push({ title: value, value: value, searchAdd: true })\r\n          }\r\n\r\n        }\r\n      },\r\n      // blur 失去焦点\r\n      handleBlurSearch(value, id, row, col) {\r\n        if (col.allowInput === true) {\r\n          // 删除无用的因搜索（用户输入）而创建的项\r\n          if (typeof value === 'string') {\r\n            let indexs = []\r\n            col.options.forEach((option, index) => {\r\n              if (option.value.toLocaleString() === value.toLocaleString()) {\r\n                delete option.searchAdd\r\n              } else if (option.searchAdd === true) {\r\n                indexs.push(index)\r\n              }\r\n            })\r\n            // 翻转删除数组中的项\r\n            for (let index of indexs.reverse()) {\r\n              col.options.splice(index, 1)\r\n            }\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      /** 拖动结束，交换inputValue中的值 */\r\n      handleDragMoveEnd(event) {\r\n        let { oldIndex, newIndex, item: { dataset: { idx: dataIdx } } } = event\r\n\r\n        // 由于动态显示隐藏行导致index有误差，需要算出真实的index\r\n        let diff = Number.parseInt(dataIdx) - oldIndex\r\n        oldIndex += diff\r\n        newIndex += diff\r\n\r\n        this.rowResort(oldIndex, newIndex)\r\n\r\n        // 触发已拖动事件\r\n        this.$emit('dragged', {\r\n          oldIndex,\r\n          newIndex,\r\n          target: this\r\n        })\r\n      },\r\n\r\n      /** 行重新排序 */\r\n      rowResort(oldIndex, newIndex) {\r\n        const sort = (array) => {\r\n          // 存储旧数据，并删除旧项目\r\n          let temp = array[oldIndex]\r\n          array.splice(oldIndex, 1)\r\n          // 向新项目里添加旧数据\r\n          array.splice(newIndex, 0, temp)\r\n        }\r\n\r\n        sort(this.rows)\r\n        sort(this.inputValues)\r\n\r\n        // 重置排序字段\r\n        this.inputValues.forEach((val, idx) => val[this.dragSortKey] = (idx + 1))\r\n\r\n        this.forceUpdateFormValues()\r\n      },\r\n\r\n      /* --- common function begin --- */\r\n\r\n      /** 鼠标移入 */\r\n      handleMouseoverCommono(row, column) {\r\n        let inputId = column.key + row.id\r\n        if (this.notPassedIds.indexOf(inputId) !== -1) {\r\n          this.showOrHideTooltip(inputId, true, true)\r\n        }\r\n      },\r\n      /** 鼠标移出 */\r\n      handleMouseoutCommono(row, column) {\r\n        let inputId = column.key + row.id\r\n        this.showOrHideTooltip(inputId, false)\r\n      },\r\n      /** input事件 */\r\n      handleInputCommono(target, index, row, column) {\r\n        let { value, dataset, selectionStart } = target\r\n        let type = FormTypes.input\r\n        let change = true\r\n        if (`${dataset.inputNumber}` === 'true') {\r\n          type = FormTypes.inputNumber\r\n          let replace = value.replace(/[^0-9]/g, '')\r\n          if (value !== replace) {\r\n            change = false\r\n            value = replace\r\n            target.value = replace\r\n            if (typeof selectionStart === 'number') {\r\n              target.selectionStart = selectionStart - 1\r\n              target.selectionEnd = selectionStart - 1\r\n            }\r\n          }\r\n        }\r\n        // 存储输入的值\r\n        this.inputValues[index][column.key] = value\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'input')\r\n\r\n        // 触发valueChange 事件\r\n        if (change) {\r\n          this.elemValueChange(type, row, column, value)\r\n        }\r\n      },\r\n      handleBlurCommono(target, index, row, column) {\r\n        let { value } = target\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur')\r\n      },\r\n      handleChangeCheckboxCommon(event, row, column) {\r\n        let { id, checked } = event.target\r\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\r\n\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\r\n      },\r\n      handleChangeSelectCommon(value, id, row, column) {\r\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.select, row, column, value)\r\n      },\r\n      handleChangeJDateCommon(value, id, row, column, showTime) {\r\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n\r\n        // 触发valueChange 事件\r\n        if (showTime) {\r\n          this.elemValueChange(FormTypes.datetime, row, column, value)\r\n        } else {\r\n          this.elemValueChange(FormTypes.date, row, column, value)\r\n        }\r\n      },\r\n      handleChangeUpload(info, id, row, column) {\r\n        let { file } = info\r\n        let value = {\r\n          name: file.name,\r\n          type: file.type,\r\n          size: file.size,\r\n          status: file.status,\r\n          percent: file.percent\r\n        }\r\n        if (column.responseName && file.response) {\r\n          value['responseName'] = file.response[column.responseName]\r\n        }\r\n        if(file.status =='done'){\r\n          value['path'] = file.response[column.responseName]\r\n        }\r\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\r\n      },\r\n      /** 记录用到数据绑定的组件的值 */\r\n      bindValuesChange(value, id, key) {\r\n        let values = Object.assign({}, this[key])\r\n        values[id] = value\r\n        return values\r\n      },\r\n\r\n      /** 显示或隐藏tooltip */\r\n      showOrHideTooltip(inputId, show, force = false) {\r\n        if (!this.tooltips[inputId] && !force) {\r\n          return\r\n        }\r\n\r\n        let tooltip = this.tooltips[inputId] || {}\r\n        if (tooltip.visible !== show) {\r\n          tooltip.visible = show\r\n          this.$set(this.tooltips, inputId, tooltip)\r\n        }\r\n      },\r\n\r\n      /** value 触发valueChange事件 */\r\n      elemValueChange(type, rowSource, columnSource, value) {\r\n        let column = Object.assign({}, columnSource)\r\n        // 将caseId去除\r\n        let row = Object.assign({}, rowSource)\r\n        row.id = this.removeCaseId(row.id)\r\n        // 获取整行的数据\r\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\r\n        if (values.length > 0) {\r\n          Object.assign(row, values[0])\r\n        }\r\n        this.$emit('valueChange', { type, row, column, value, target: this })\r\n      },\r\n\r\n      /** 将caseId去除 */\r\n      removeCaseId(id) {\r\n        let remove = id.split(this.caseId)[1]\r\n        return remove ? remove : id\r\n      },\r\n\r\n      handleClickDelFile(id) {\r\n        this.uploadValues[id] = null\r\n      },\r\n\r\n      /** 加载数据字典并合并到 options */\r\n      _loadDictConcatToOptions(column) {\r\n        initDictOptions(column.dictCode).then((res) => {\r\n          if (res.success) {\r\n            let newOptions = (column.options || [])// .concat(res.result)\r\n            res.result.forEach(item => {\r\n              for (let option of newOptions) if (option.value === item.value) return\r\n              newOptions.push(item)\r\n            })\r\n            column.options = newOptions\r\n          } else {\r\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\r\n            console.log(res.message)\r\n            console.groupEnd()\r\n          }\r\n        })\r\n      },\r\n\r\n      /* --- common function end --- */\r\n\r\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\r\n\r\n      /** 辅助方法：打印日志 */\r\n      log: console.log,\r\n\r\n      getVM() {\r\n        return this\r\n      },\r\n\r\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\r\n      getParentContainer(node) {\r\n        let element = (() => {\r\n          // nodeType 8\t: Comment\t: 注释\r\n          if (this.$el && this.$el.nodeType !== 8) {\r\n            return this.$el\r\n          }\r\n          let doc = document.getElementById(this.caseId + 'inputTable')\r\n          if (doc != null) {\r\n            return doc\r\n          }\r\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\r\n        })()\r\n\r\n        // 递归判断是否带有 overflow: hidden；的父元素\r\n        const ifParent = (child) => {\r\n          let currentOverflow = null\r\n          if (child['currentStyle']) {\r\n            currentOverflow = child['currentStyle']['overflow']\r\n          } else if (window.getComputedStyle) {\r\n            currentOverflow = window.getComputedStyle(child)['overflow']\r\n          }\r\n          if (currentOverflow != null) {\r\n            if (currentOverflow === 'hidden') {\r\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\r\n              let temp = ifParent(child.parentNode)\r\n              return temp != null ? temp : child.parentNode\r\n            } else\r\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\r\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\r\n              return ifParent(child.parentNode)\r\n            } else {\r\n              // 直到 body 都没有遇到有 hidden 的标签\r\n              return null\r\n            }\r\n          } else {\r\n            return child\r\n          }\r\n        }\r\n\r\n        let temp = ifParent(element)\r\n        return (temp != null) ? temp : element\r\n      },\r\n\r\n      /** 辅助方法：替换${...}变量 */\r\n      replaceProps(col, value) {\r\n        if (value && typeof value === 'string') {\r\n          value = value.replace(/\\${title}/g, col.title)\r\n          value = value.replace(/\\${key}/g, col.key)\r\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\r\n        }\r\n        return value\r\n      },\r\n\r\n      /** view辅助方法：构建 tr style */\r\n      buildTrStyle(index) {\r\n        return {\r\n          'top': `${rowHeight * index}px`\r\n        }\r\n      },\r\n      /** view辅助方法：构建 td style */\r\n      buildTdStyle(col) {\r\n        const isEmptyWidth = (column) => (column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0)\r\n\r\n        let style = {}\r\n        // 计算宽度\r\n        if (col.width) {\r\n          style['width'] = col.width\r\n        } else if (this.columns) {\r\n          style['width'] = `${(100 - 4 * 2) / (this.columns.filter(column => !isEmptyWidth(column))).length}%`\r\n        } else {\r\n          style['width'] = '120px'\r\n        }\r\n        // checkbox 居中显示\r\n        let isCheckbox = col.type === FormTypes.checkbox\r\n        if (isCheckbox) {\r\n          style['align-items'] = 'center'\r\n          style['text-align'] = 'center'\r\n          style['padding-left'] = '0'\r\n          style['padding-right'] = '0'\r\n        }\r\n        if (isEmptyWidth(col)) {\r\n          style['padding-left'] = '0'\r\n          style['padding-right'] = '0'\r\n        }\r\n        return style\r\n      },\r\n      /** view辅助方法：构造props */\r\n      buildProps(row, col) {\r\n        let props = {}\r\n        // 解析props\r\n        if (typeof col.props === 'object') {\r\n          for (let prop in col.props) {\r\n            if (col.props.hasOwnProperty(prop)) {\r\n              props[prop] = this.replaceProps(col, col.props[prop])\r\n            }\r\n          }\r\n        }\r\n        // 判断select是否允许输入\r\n        if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\r\n          props['showSearch'] = true\r\n        }\r\n\r\n        // 判断是否是禁用的列\r\n        props['disabled'] = (typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'])\r\n\r\n        // 判断是否为禁用的行\r\n        if (props['disabled'] !== true) {\r\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\r\n        }\r\n\r\n        // 判断是否禁用全部组件\r\n        if (this.disabled === true) {\r\n          props['disabled'] = true\r\n        }\r\n\r\n        return props\r\n      },\r\n      /** upload 辅助方法：获取 headers */\r\n      uploadGetHeaders(row, column) {\r\n        let headers = {}\r\n        if (column.token === true) {\r\n          headers['X-Access-Token'] = this.accessToken\r\n        }\r\n        return headers\r\n      },\r\n      /** 上传请求地址 */\r\n      getUploadAction(value){\r\n        if(!value){\r\n          return window._CONFIG['domianURL']+\"/sys/common/upload\"\r\n        }else{\r\n          return value\r\n        }\r\n      },\r\n      /** 预览图片地址 */\r\n      getCellImageView(id){\r\n        let currUploadObj = this.uploadValues[id] || null\r\n        if(currUploadObj && currUploadObj['path']){\r\n          return window._CONFIG['domianURL']+\"/sys/common/view/\"+currUploadObj['path']\r\n        }else{\r\n          return ''\r\n        }\r\n      },\r\n      /** popup回调 */\r\n      popupCallback(value,others,id,row,column,index){\r\n        // 存储输入的值\r\n        this.popupValues[id]=value\r\n        if(others){\r\n          Object.keys(others).map((key)=>{\r\n            this.inputValues[index][key] = others[key]\r\n          })\r\n        }\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(\"input\", row, column, value)\r\n        // 更新form表单的值\r\n        this.$nextTick(() => {\r\n          this.forceUpdateFormValues()\r\n        })\r\n      },\r\n      /** popup输入框回显 */\r\n      getPopupValue(id){\r\n        return this.popupValues[id]\r\n      },\r\n      handleRadioChange(value, id, row, column) {\r\n        this.radioValues = this.bindValuesChange(value, id, 'radioValues')\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.radio, row, column, value)\r\n      },\r\n      handleMultiSelectChange(value, id, row, column) {\r\n        this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues')\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.list_multi, row, column, value)\r\n      },\r\n      handleSearchSelectChange(value, id, row, column) {\r\n        this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues')\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\r\n        this.elemValueChange(FormTypes.sel_search, row, column, value)\r\n      },\r\n      filterOption(input, option) {\r\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      },\r\n\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n  .action-button {\r\n    margin-bottom: 8px;\r\n\r\n    .gap {\r\n      padding-left: 8px;\r\n    }\r\n\r\n  }\r\n\r\n  /* 设定边框参数 */\r\n  @borderColor: #e8e8e8;\r\n  @border: 1px solid @borderColor;\r\n  /* tr & td 之间的间距 */\r\n  @spacing: 8px;\r\n\r\n  .input-table {\r\n    max-width: 100%;\r\n    overflow-x: hidden;\r\n    overflow-y: hidden;\r\n    position: relative;\r\n    border: @border;\r\n\r\n    .thead, .tbody {\r\n\r\n      .tr, .td {\r\n        display: flex;\r\n      }\r\n\r\n      .td {\r\n\r\n        /*border-right: 1px solid red;*/\r\n        /*color: white;*/\r\n        /*background-color: black;*/\r\n        /*margin-right: @spacing !important;*/\r\n\r\n        padding-left: @spacing;\r\n        flex-direction: column;\r\n\r\n        &.td-cb, &.td-num {\r\n          min-width: 4%;\r\n          max-width: 45px;\r\n          margin-right: 0;\r\n          padding-left: 0;\r\n          padding-right: 0;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n\r\n        &.td-ds {\r\n          margin-right: 0;\r\n          padding-left: 0;\r\n          padding-right: 0;\r\n          justify-content: center;\r\n          align-items: center;\r\n\r\n          .td-ds-icons {\r\n            position: relative;\r\n            cursor: move;\r\n            width: 100%;\r\n            /*padding: 25% 0;*/\r\n            height: 100%;\r\n\r\n            .anticon-align-left,\r\n            .anticon-align-right {\r\n              position: absolute;\r\n              top: 30%;\r\n            }\r\n\r\n            .anticon-align-left {\r\n              left: 25%;\r\n            }\r\n\r\n            .anticon-align-right {\r\n              right: 25%;\r\n            }\r\n          }\r\n\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    .thead {\r\n      overflow-y: scroll;\r\n      overflow-x: hidden;\r\n      border-bottom: @border;\r\n\r\n      /** 隐藏thead的滑块   */\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        box-shadow: none !important;\r\n        background-color: transparent !important;\r\n      }\r\n\r\n      .tr {\r\n        min-width: 100%;\r\n        overflow-y: scroll;\r\n      }\r\n\r\n      .td {\r\n        /*flex: 1;*/\r\n        padding: 8px @spacing;\r\n        justify-content: center;\r\n      }\r\n\r\n    }\r\n\r\n    .tbody {\r\n      position: relative;\r\n      top: 0;\r\n      left: 0;\r\n      overflow-x: hidden;\r\n      overflow-y: hidden;\r\n      min-height: 61px;\r\n      /*max-height: 400px;*/\r\n      min-width: 100%;\r\n\r\n      .tr-nodata {\r\n        color: #999;\r\n        line-height: 61px;\r\n        text-align: center;\r\n      }\r\n\r\n      .tr {\r\n        /*line-height: 50px;*/\r\n\r\n        border-bottom: @border;\r\n        transition: background-color 300ms;\r\n        width: 100%;\r\n        position: absolute;\r\n        left: 0;\r\n        z-index: 10;\r\n\r\n        &.tr-checked {\r\n          background-color: #fafafa;\r\n        }\r\n\r\n        &:hover {\r\n          background-color: #E6F7FF;\r\n        }\r\n\r\n      }\r\n\r\n      .tr-expand {\r\n        position: relative;\r\n        z-index: 9;\r\n        background-color: white;\r\n      }\r\n\r\n      .td {\r\n        /*flex: 1;*/\r\n        padding: 14px 0 14px @spacing;\r\n        justify-content: center;\r\n\r\n        &:last-child {\r\n          padding-right: @spacing;\r\n        }\r\n\r\n        input {\r\n          font-variant: tabular-nums;\r\n          box-sizing: border-box;\r\n          margin: 0;\r\n          list-style: none;\r\n          position: relative;\r\n          display: inline-block;\r\n          padding: 4px 11px;\r\n          width: 100%;\r\n          height: 32px;\r\n          font-size: 14px;\r\n          line-height: 1.5;\r\n          color: rgba(0, 0, 0, 0.65);\r\n          background-color: #fff;\r\n          border: 1px solid #d9d9d9;\r\n          border-radius: 4px;\r\n          transition: all 0.3s;\r\n          outline: none;\r\n\r\n          &:hover {\r\n            border-color: #4D90FE\r\n          }\r\n\r\n          &:focus {\r\n            border-color: #40a9ff;\r\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n            border-right-width: 1px !important;\r\n          }\r\n\r\n          &:disabled {\r\n            color: rgba(0, 0, 0, 0.25);\r\n            background: #f5f5f5;\r\n            cursor: not-allowed;\r\n          }\r\n\r\n          /* 设置placeholder的颜色 */\r\n\r\n          &::-webkit-input-placeholder { /* WebKit browsers */\r\n            color: #ccc;\r\n          }\r\n\r\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n            color: #ccc;\r\n          }\r\n\r\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n            color: #ccc;\r\n          }\r\n\r\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\r\n            color: #ccc;\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    .scroll-view {\r\n      overflow: auto;\r\n      overflow-y: scroll;\r\n    }\r\n\r\n    .thead, .thead .tr, .scroll-view {\r\n      @scrollBarSize: 6px;\r\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\r\n\r\n      &::-webkit-scrollbar {\r\n        width: @scrollBarSize;\r\n        height: @scrollBarSize;\r\n        background-color: transparent;\r\n      }\r\n\r\n      /* 定义滚动条轨道 */\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background-color: #f0f0f0;\r\n      }\r\n\r\n      /* 定义滑块 */\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        background-color: #eee;\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n\r\n        &:hover {\r\n          background-color: #bbb;\r\n        }\r\n\r\n        &:active {\r\n          background-color: #888;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    .thead .tr {\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background-color: transparent;\r\n      }\r\n\r\n      /* IE模式下隐藏 */\r\n      -ms-overflow-style: none;\r\n      -ms-scroll-chaining: chained;\r\n      -ms-content-zooming: zoom;\r\n      -ms-scroll-rails: none;\r\n      -ms-content-zoom-limit-min: 100%;\r\n      -ms-content-zoom-limit-max: 500%;\r\n      -ms-scroll-snap-type: proximity;\r\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\r\n    }\r\n\r\n  }\r\n\r\n</style>"],"sourceRoot":"src/components/jeecg"}]}